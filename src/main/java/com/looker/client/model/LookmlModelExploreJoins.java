/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * LookmlModelExploreJoins
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-15T12:39:13.185-08:00[America/Los_Angeles]")public class LookmlModelExploreJoins {

  @SerializedName("name")
  private String name = null;

  @SerializedName("dependent_fields")
  private List<String> dependentFields = null;

  @SerializedName("fields")
  private List<String> fields = null;

  @SerializedName("foreign_key")
  private String foreignKey = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("outer_only")
  private Boolean outerOnly = null;

  @SerializedName("relationship")
  private String relationship = null;

  @SerializedName("required_joins")
  private List<String> requiredJoins = null;

  @SerializedName("sql_foreign_key")
  private String sqlForeignKey = null;

  @SerializedName("sql_on")
  private String sqlOn = null;

  @SerializedName("sql_table_name")
  private String sqlTableName = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("view_label")
  private String viewLabel = null;
  /**
  * Name of this join (and name of the view to join)
  * @return name
  **/
  @Schema(description = "Name of this join (and name of the view to join)")
  public String getName() {
    return name;
  }
  /**
  * Fields referenced by the join
  * @return dependentFields
  **/
  @Schema(description = "Fields referenced by the join")
  public List<String> getDependentFields() {
    return dependentFields;
  }
  /**
  * Fields of the joined view to pull into this explore
  * @return fields
  **/
  @Schema(description = "Fields of the joined view to pull into this explore")
  public List<String> getFields() {
    return fields;
  }
  /**
  * Name of the dimension in this explore whose value is in the primary key of the joined view
  * @return foreignKey
  **/
  @Schema(description = "Name of the dimension in this explore whose value is in the primary key of the joined view")
  public String getForeignKey() {
    return foreignKey;
  }
  /**
  * Name of view to join
  * @return from
  **/
  @Schema(description = "Name of view to join")
  public String getFrom() {
    return from;
  }
  /**
  * Specifies whether all queries must use an outer join
  * @return outerOnly
  **/
  @Schema(description = "Specifies whether all queries must use an outer join")
  public Boolean isOuterOnly() {
    return outerOnly;
  }
  /**
  * many_to_one, one_to_one, one_to_many, many_to_many
  * @return relationship
  **/
  @Schema(description = "many_to_one, one_to_one, one_to_many, many_to_many")
  public String getRelationship() {
    return relationship;
  }
  /**
  * Names of joins that must always be included in SQL queries
  * @return requiredJoins
  **/
  @Schema(description = "Names of joins that must always be included in SQL queries")
  public List<String> getRequiredJoins() {
    return requiredJoins;
  }
  /**
  * SQL expression that produces a foreign key
  * @return sqlForeignKey
  **/
  @Schema(description = "SQL expression that produces a foreign key")
  public String getSqlForeignKey() {
    return sqlForeignKey;
  }
  /**
  * SQL ON expression describing the join condition
  * @return sqlOn
  **/
  @Schema(description = "SQL ON expression describing the join condition")
  public String getSqlOn() {
    return sqlOn;
  }
  /**
  * SQL table name to join
  * @return sqlTableName
  **/
  @Schema(description = "SQL table name to join")
  public String getSqlTableName() {
    return sqlTableName;
  }
  /**
  * The join type: left_outer, full_outer, inner, or cross
  * @return type
  **/
  @Schema(description = "The join type: left_outer, full_outer, inner, or cross")
  public String getType() {
    return type;
  }
  /**
  * Label to display in UI selectors
  * @return viewLabel
  **/
  @Schema(description = "Label to display in UI selectors")
  public String getViewLabel() {
    return viewLabel;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookmlModelExploreJoins lookmlModelExploreJoins = (LookmlModelExploreJoins) o;
    return Objects.equals(this.name, lookmlModelExploreJoins.name) &&
        Objects.equals(this.dependentFields, lookmlModelExploreJoins.dependentFields) &&
        Objects.equals(this.fields, lookmlModelExploreJoins.fields) &&
        Objects.equals(this.foreignKey, lookmlModelExploreJoins.foreignKey) &&
        Objects.equals(this.from, lookmlModelExploreJoins.from) &&
        Objects.equals(this.outerOnly, lookmlModelExploreJoins.outerOnly) &&
        Objects.equals(this.relationship, lookmlModelExploreJoins.relationship) &&
        Objects.equals(this.requiredJoins, lookmlModelExploreJoins.requiredJoins) &&
        Objects.equals(this.sqlForeignKey, lookmlModelExploreJoins.sqlForeignKey) &&
        Objects.equals(this.sqlOn, lookmlModelExploreJoins.sqlOn) &&
        Objects.equals(this.sqlTableName, lookmlModelExploreJoins.sqlTableName) &&
        Objects.equals(this.type, lookmlModelExploreJoins.type) &&
        Objects.equals(this.viewLabel, lookmlModelExploreJoins.viewLabel);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, dependentFields, fields, foreignKey, from, outerOnly, relationship, requiredJoins, sqlForeignKey, sqlOn, sqlTableName, type, viewLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookmlModelExploreJoins {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dependentFields: ").append(toIndentedString(dependentFields)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    foreignKey: ").append(toIndentedString(foreignKey)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    outerOnly: ").append(toIndentedString(outerOnly)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("    requiredJoins: ").append(toIndentedString(requiredJoins)).append("\n");
    sb.append("    sqlForeignKey: ").append(toIndentedString(sqlForeignKey)).append("\n");
    sb.append("    sqlOn: ").append(toIndentedString(sqlOn)).append("\n");
    sb.append("    sqlTableName: ").append(toIndentedString(sqlTableName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    viewLabel: ").append(toIndentedString(viewLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

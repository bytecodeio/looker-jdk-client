/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.api;

import com.google.gson.reflect.TypeToken;
import com.looker.client.ApiCallback;
import com.looker.client.ApiClient;
import com.looker.client.ApiException;
import com.looker.client.ApiResponse;
import com.looker.client.Configuration;
import com.looker.client.Pair;
import com.looker.client.ProgressRequestBody;
import com.looker.client.ProgressResponseBody;
import com.looker.client.model.AccessFilter;
import com.looker.client.model.CredentialsApi;
import com.looker.client.model.CredentialsApi3;
import com.looker.client.model.CredentialsEmail;
import com.looker.client.model.CredentialsEmbed;
import com.looker.client.model.CredentialsGoogle;
import com.looker.client.model.CredentialsLDAP;
import com.looker.client.model.CredentialsLookerOpenid;
import com.looker.client.model.CredentialsOIDC;
import com.looker.client.model.CredentialsSaml;
import com.looker.client.model.CredentialsTotp;
import com.looker.client.model.Error;
import com.looker.client.model.Role;
import com.looker.client.model.Session;
import com.looker.client.model.User;
import com.looker.client.model.UserAttributeWithValue;
import com.looker.client.model.ValidationError;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient apiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for allUserAccessFilters
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allUserAccessFiltersCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/access_filters"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allUserAccessFiltersValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling allUserAccessFilters(Async)");
        }
        
        com.squareup.okhttp.Call call = allUserAccessFiltersCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All Access Filters
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return List&lt;AccessFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AccessFilter> allUserAccessFilters(Integer userId, String fields) throws ApiException {
        ApiResponse<List<AccessFilter>> resp = allUserAccessFiltersWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get All Access Filters
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;AccessFilter&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AccessFilter>> allUserAccessFiltersWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = allUserAccessFiltersValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<AccessFilter>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Access Filters (asynchronously)
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allUserAccessFiltersAsync(Integer userId, String fields, final ApiCallback<List<AccessFilter>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allUserAccessFiltersValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AccessFilter>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for allUserCredentialsApi3s
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allUserCredentialsApi3sCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_api3"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allUserCredentialsApi3sValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling allUserCredentialsApi3s(Async)");
        }
        
        com.squareup.okhttp.Call call = allUserCredentialsApi3sCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All API 3 Credentials
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return List&lt;CredentialsApi3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CredentialsApi3> allUserCredentialsApi3s(Integer userId, String fields) throws ApiException {
        ApiResponse<List<CredentialsApi3>> resp = allUserCredentialsApi3sWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get All API 3 Credentials
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;CredentialsApi3&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CredentialsApi3>> allUserCredentialsApi3sWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = allUserCredentialsApi3sValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<CredentialsApi3>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All API 3 Credentials (asynchronously)
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allUserCredentialsApi3sAsync(Integer userId, String fields, final ApiCallback<List<CredentialsApi3>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allUserCredentialsApi3sValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CredentialsApi3>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for allUserCredentialsEmbeds
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allUserCredentialsEmbedsCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_embed"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allUserCredentialsEmbedsValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling allUserCredentialsEmbeds(Async)");
        }
        
        com.squareup.okhttp.Call call = allUserCredentialsEmbedsCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All Embedding Credentials
     * ### Embed login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return List&lt;CredentialsEmbed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CredentialsEmbed> allUserCredentialsEmbeds(Integer userId, String fields) throws ApiException {
        ApiResponse<List<CredentialsEmbed>> resp = allUserCredentialsEmbedsWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get All Embedding Credentials
     * ### Embed login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;CredentialsEmbed&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CredentialsEmbed>> allUserCredentialsEmbedsWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = allUserCredentialsEmbedsValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<CredentialsEmbed>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Embedding Credentials (asynchronously)
     * ### Embed login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allUserCredentialsEmbedsAsync(Integer userId, String fields, final ApiCallback<List<CredentialsEmbed>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allUserCredentialsEmbedsValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CredentialsEmbed>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for allUserSessions
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allUserSessionsCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/sessions"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allUserSessionsValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling allUserSessions(Async)");
        }
        
        com.squareup.okhttp.Call call = allUserSessionsCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All Web Login Sessions
     * ### Web login session for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return List&lt;Session&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Session> allUserSessions(Integer userId, String fields) throws ApiException {
        ApiResponse<List<Session>> resp = allUserSessionsWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get All Web Login Sessions
     * ### Web login session for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;Session&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Session>> allUserSessionsWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = allUserSessionsValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<Session>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Web Login Sessions (asynchronously)
     * ### Web login session for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allUserSessionsAsync(Integer userId, String fields, final ApiCallback<List<Session>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allUserSessionsValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Session>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for allUsers
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param ids Optional list of ids to get specific users. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allUsersCall(String fields, Integer page, Integer perPage, String sorts, List<Long> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        if (sorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorts", sorts));
        if (ids != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allUsersValidateBeforeCall(String fields, Integer page, Integer perPage, String sorts, List<Long> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = allUsersCall(fields, page, perPage, sorts, ids, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get All Users
     * ### Get information about all users. 
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param ids Optional list of ids to get specific users. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<User> allUsers(String fields, Integer page, Integer perPage, String sorts, List<Long> ids) throws ApiException {
        ApiResponse<List<User>> resp = allUsersWithHttpInfo(fields, page, perPage, sorts, ids);
        return resp.getData();
    }

    /**
     * Get All Users
     * ### Get information about all users. 
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param ids Optional list of ids to get specific users. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<User>> allUsersWithHttpInfo(String fields, Integer page, Integer perPage, String sorts, List<Long> ids) throws ApiException {
        com.squareup.okhttp.Call call = allUsersValidateBeforeCall(fields, page, perPage, sorts, ids, null, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Users (asynchronously)
     * ### Get information about all users. 
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param ids Optional list of ids to get specific users. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allUsersAsync(String fields, Integer page, Integer perPage, String sorts, List<Long> ids, final ApiCallback<List<User>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allUsersValidateBeforeCall(fields, page, perPage, sorts, ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUser
     * @param body User (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserCall(User body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserValidateBeforeCall(User body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = createUserCall(body, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create User
     * ### Create a user with the specified information. 
     * @param body User (optional)
     * @param fields Requested fields. (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User createUser(User body, String fields) throws ApiException {
        ApiResponse<User> resp = createUserWithHttpInfo(body, fields);
        return resp.getData();
    }

    /**
     * Create User
     * ### Create a user with the specified information. 
     * @param body User (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> createUserWithHttpInfo(User body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createUserValidateBeforeCall(body, fields, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create User (asynchronously)
     * ### Create a user with the specified information. 
     * @param body User (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAsync(User body, String fields, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUserAccessFilter
     * @param userId id of user (required)
     * @param body Access Filter (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserAccessFilterCall(Integer userId, AccessFilter body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/access_filters"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserAccessFilterValidateBeforeCall(Integer userId, AccessFilter body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createUserAccessFilter(Async)");
        }
        
        com.squareup.okhttp.Call call = createUserAccessFilterCall(userId, body, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Access Filter
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param userId id of user (required)
     * @param body Access Filter (optional)
     * @param fields Requested fields. (optional)
     * @return AccessFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessFilter createUserAccessFilter(Integer userId, AccessFilter body, String fields) throws ApiException {
        ApiResponse<AccessFilter> resp = createUserAccessFilterWithHttpInfo(userId, body, fields);
        return resp.getData();
    }

    /**
     * Create Access Filter
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param userId id of user (required)
     * @param body Access Filter (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;AccessFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessFilter> createUserAccessFilterWithHttpInfo(Integer userId, AccessFilter body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createUserAccessFilterValidateBeforeCall(userId, body, fields, null, null);
        Type localVarReturnType = new TypeToken<AccessFilter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Access Filter (asynchronously)
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param userId id of user (required)
     * @param body Access Filter (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAccessFilterAsync(Integer userId, AccessFilter body, String fields, final ApiCallback<AccessFilter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserAccessFilterValidateBeforeCall(userId, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessFilter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUserCredentialsApi
     * @param userId Id of user (required)
     * @param body API Credential (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserCredentialsApiCall(Integer userId, CredentialsApi body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_api"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserCredentialsApiValidateBeforeCall(Integer userId, CredentialsApi body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createUserCredentialsApi(Async)");
        }
        
        com.squareup.okhttp.Call call = createUserCredentialsApiCall(userId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create API Credential
     * ### Create API Credential. SUPPORT FOR THIS HAS BEEN REMOVED. 
     * @param userId Id of user (required)
     * @param body API Credential (optional)
     * @return CredentialsApi
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsApi createUserCredentialsApi(Integer userId, CredentialsApi body) throws ApiException {
        ApiResponse<CredentialsApi> resp = createUserCredentialsApiWithHttpInfo(userId, body);
        return resp.getData();
    }

    /**
     * Create API Credential
     * ### Create API Credential. SUPPORT FOR THIS HAS BEEN REMOVED. 
     * @param userId Id of user (required)
     * @param body API Credential (optional)
     * @return ApiResponse&lt;CredentialsApi&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsApi> createUserCredentialsApiWithHttpInfo(Integer userId, CredentialsApi body) throws ApiException {
        com.squareup.okhttp.Call call = createUserCredentialsApiValidateBeforeCall(userId, body, null, null);
        Type localVarReturnType = new TypeToken<CredentialsApi>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create API Credential (asynchronously)
     * ### Create API Credential. SUPPORT FOR THIS HAS BEEN REMOVED. 
     * @param userId Id of user (required)
     * @param body API Credential (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserCredentialsApiAsync(Integer userId, CredentialsApi body, final ApiCallback<CredentialsApi> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserCredentialsApiValidateBeforeCall(userId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsApi>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUserCredentialsApi3
     * @param userId id of user (required)
     * @param body API 3 Credential (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserCredentialsApi3Call(Integer userId, CredentialsApi3 body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_api3"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserCredentialsApi3ValidateBeforeCall(Integer userId, CredentialsApi3 body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createUserCredentialsApi3(Async)");
        }
        
        com.squareup.okhttp.Call call = createUserCredentialsApi3Call(userId, body, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create API 3 Credential
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param userId id of user (required)
     * @param body API 3 Credential (optional)
     * @param fields Requested fields. (optional)
     * @return CredentialsApi3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsApi3 createUserCredentialsApi3(Integer userId, CredentialsApi3 body, String fields) throws ApiException {
        ApiResponse<CredentialsApi3> resp = createUserCredentialsApi3WithHttpInfo(userId, body, fields);
        return resp.getData();
    }

    /**
     * Create API 3 Credential
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param userId id of user (required)
     * @param body API 3 Credential (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsApi3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsApi3> createUserCredentialsApi3WithHttpInfo(Integer userId, CredentialsApi3 body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createUserCredentialsApi3ValidateBeforeCall(userId, body, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsApi3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create API 3 Credential (asynchronously)
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param userId id of user (required)
     * @param body API 3 Credential (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserCredentialsApi3Async(Integer userId, CredentialsApi3 body, String fields, final ApiCallback<CredentialsApi3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserCredentialsApi3ValidateBeforeCall(userId, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsApi3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUserCredentialsEmail
     * @param userId id of user (required)
     * @param body Email/Password Credential (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserCredentialsEmailCall(Integer userId, CredentialsEmail body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_email"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserCredentialsEmailValidateBeforeCall(Integer userId, CredentialsEmail body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createUserCredentialsEmail(Async)");
        }
        
        com.squareup.okhttp.Call call = createUserCredentialsEmailCall(userId, body, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Email/Password Credential
     * ### Email/password login information for the specified user.
     * @param userId id of user (required)
     * @param body Email/Password Credential (optional)
     * @param fields Requested fields. (optional)
     * @return CredentialsEmail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsEmail createUserCredentialsEmail(Integer userId, CredentialsEmail body, String fields) throws ApiException {
        ApiResponse<CredentialsEmail> resp = createUserCredentialsEmailWithHttpInfo(userId, body, fields);
        return resp.getData();
    }

    /**
     * Create Email/Password Credential
     * ### Email/password login information for the specified user.
     * @param userId id of user (required)
     * @param body Email/Password Credential (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsEmail> createUserCredentialsEmailWithHttpInfo(Integer userId, CredentialsEmail body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createUserCredentialsEmailValidateBeforeCall(userId, body, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsEmail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Email/Password Credential (asynchronously)
     * ### Email/password login information for the specified user.
     * @param userId id of user (required)
     * @param body Email/Password Credential (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserCredentialsEmailAsync(Integer userId, CredentialsEmail body, String fields, final ApiCallback<CredentialsEmail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserCredentialsEmailValidateBeforeCall(userId, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsEmail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUserCredentialsEmailPasswordReset
     * @param userId Id of user (required)
     * @param expires Expiring token. (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserCredentialsEmailPasswordResetCall(Integer userId, Boolean expires, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_email/password_reset"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expires != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expires", expires));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserCredentialsEmailPasswordResetValidateBeforeCall(Integer userId, Boolean expires, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createUserCredentialsEmailPasswordReset(Async)");
        }
        
        com.squareup.okhttp.Call call = createUserCredentialsEmailPasswordResetCall(userId, expires, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Password Reset Token
     * ### Create a password reset token. This will create a cryptographically secure random password reset token for the user. If the user already has a password reset token then this invalidates the old token and creates a new one. The token is expressed as the &#x27;password_reset_url&#x27; of the user&#x27;s email/password credential object. This takes an optional &#x27;expires&#x27; param to indicate if the new token should be an expiring token. Tokens that expire are typically used for self-service password resets for existing users. Invitation emails for new users typically are not set to expire. The expire period is always 60 minutes when expires is enabled. This method can be called with an empty body. 
     * @param userId Id of user (required)
     * @param expires Expiring token. (optional)
     * @param fields Requested fields. (optional)
     * @return CredentialsEmail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsEmail createUserCredentialsEmailPasswordReset(Integer userId, Boolean expires, String fields) throws ApiException {
        ApiResponse<CredentialsEmail> resp = createUserCredentialsEmailPasswordResetWithHttpInfo(userId, expires, fields);
        return resp.getData();
    }

    /**
     * Create Password Reset Token
     * ### Create a password reset token. This will create a cryptographically secure random password reset token for the user. If the user already has a password reset token then this invalidates the old token and creates a new one. The token is expressed as the &#x27;password_reset_url&#x27; of the user&#x27;s email/password credential object. This takes an optional &#x27;expires&#x27; param to indicate if the new token should be an expiring token. Tokens that expire are typically used for self-service password resets for existing users. Invitation emails for new users typically are not set to expire. The expire period is always 60 minutes when expires is enabled. This method can be called with an empty body. 
     * @param userId Id of user (required)
     * @param expires Expiring token. (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsEmail> createUserCredentialsEmailPasswordResetWithHttpInfo(Integer userId, Boolean expires, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createUserCredentialsEmailPasswordResetValidateBeforeCall(userId, expires, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsEmail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Password Reset Token (asynchronously)
     * ### Create a password reset token. This will create a cryptographically secure random password reset token for the user. If the user already has a password reset token then this invalidates the old token and creates a new one. The token is expressed as the &#x27;password_reset_url&#x27; of the user&#x27;s email/password credential object. This takes an optional &#x27;expires&#x27; param to indicate if the new token should be an expiring token. Tokens that expire are typically used for self-service password resets for existing users. Invitation emails for new users typically are not set to expire. The expire period is always 60 minutes when expires is enabled. This method can be called with an empty body. 
     * @param userId Id of user (required)
     * @param expires Expiring token. (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserCredentialsEmailPasswordResetAsync(Integer userId, Boolean expires, String fields, final ApiCallback<CredentialsEmail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserCredentialsEmailPasswordResetValidateBeforeCall(userId, expires, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsEmail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUserCredentialsTotp
     * @param userId id of user (required)
     * @param body Two-Factor Credential (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserCredentialsTotpCall(Integer userId, CredentialsTotp body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_totp"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserCredentialsTotpValidateBeforeCall(Integer userId, CredentialsTotp body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createUserCredentialsTotp(Async)");
        }
        
        com.squareup.okhttp.Call call = createUserCredentialsTotpCall(userId, body, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Two-Factor Credential
     * ### Two-factor login information for the specified user.
     * @param userId id of user (required)
     * @param body Two-Factor Credential (optional)
     * @param fields Requested fields. (optional)
     * @return CredentialsTotp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsTotp createUserCredentialsTotp(Integer userId, CredentialsTotp body, String fields) throws ApiException {
        ApiResponse<CredentialsTotp> resp = createUserCredentialsTotpWithHttpInfo(userId, body, fields);
        return resp.getData();
    }

    /**
     * Create Two-Factor Credential
     * ### Two-factor login information for the specified user.
     * @param userId id of user (required)
     * @param body Two-Factor Credential (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsTotp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsTotp> createUserCredentialsTotpWithHttpInfo(Integer userId, CredentialsTotp body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createUserCredentialsTotpValidateBeforeCall(userId, body, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsTotp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Two-Factor Credential (asynchronously)
     * ### Two-factor login information for the specified user.
     * @param userId id of user (required)
     * @param body Two-Factor Credential (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserCredentialsTotpAsync(Integer userId, CredentialsTotp body, String fields, final ApiCallback<CredentialsTotp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserCredentialsTotpValidateBeforeCall(userId, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsTotp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUser
     * @param userId Id of user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete User
     * ### Delete the user with a specific id.  **DANGER** this will delete the user and all looks and other information owned by the user. 
     * @param userId Id of user (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUser(Integer userId) throws ApiException {
        ApiResponse<String> resp = deleteUserWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Delete User
     * ### Delete the user with a specific id.  **DANGER** this will delete the user and all looks and other information owned by the user. 
     * @param userId Id of user (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete User (asynchronously)
     * ### Delete the user with a specific id.  **DANGER** this will delete the user and all looks and other information owned by the user. 
     * @param userId Id of user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAsync(Integer userId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserAccessFilter
     * @param userId id of user (required)
     * @param accessFilterId id of Access Filter (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserAccessFilterCall(Integer userId, Integer accessFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/access_filters/{access_filter_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "access_filter_id" + "\\}", apiClient.escapeString(accessFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserAccessFilterValidateBeforeCall(Integer userId, Integer accessFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserAccessFilter(Async)");
        }
        // verify the required parameter 'accessFilterId' is set
        if (accessFilterId == null) {
            throw new ApiException("Missing the required parameter 'accessFilterId' when calling deleteUserAccessFilter(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserAccessFilterCall(userId, accessFilterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Access Filter
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param userId id of user (required)
     * @param accessFilterId id of Access Filter (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUserAccessFilter(Integer userId, Integer accessFilterId) throws ApiException {
        ApiResponse<String> resp = deleteUserAccessFilterWithHttpInfo(userId, accessFilterId);
        return resp.getData();
    }

    /**
     * Delete Access Filter
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param userId id of user (required)
     * @param accessFilterId id of Access Filter (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserAccessFilterWithHttpInfo(Integer userId, Integer accessFilterId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserAccessFilterValidateBeforeCall(userId, accessFilterId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Access Filter (asynchronously)
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param userId id of user (required)
     * @param accessFilterId id of Access Filter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAccessFilterAsync(Integer userId, Integer accessFilterId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserAccessFilterValidateBeforeCall(userId, accessFilterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserAttributeUserValue
     * @param userId Id of user (required)
     * @param userAttributeId Id of user attribute (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserAttributeUserValueCall(Integer userId, Integer userAttributeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/attribute_values/{user_attribute_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "user_attribute_id" + "\\}", apiClient.escapeString(userAttributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserAttributeUserValueValidateBeforeCall(Integer userId, Integer userAttributeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserAttributeUserValue(Async)");
        }
        // verify the required parameter 'userAttributeId' is set
        if (userAttributeId == null) {
            throw new ApiException("Missing the required parameter 'userAttributeId' when calling deleteUserAttributeUserValue(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserAttributeUserValueCall(userId, userAttributeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete User Attribute User Value
     * ### Delete a user attribute value from a user&#x27;s account settings.  After the user attribute value is deleted from the user&#x27;s account settings, subsequent requests for the user attribute value for this user will draw from the user&#x27;s groups or the default value of the user attribute. See [Get User Attribute Values](#!/User/user_attribute_user_values) for more information about how user attribute values are resolved. 
     * @param userId Id of user (required)
     * @param userAttributeId Id of user attribute (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUserAttributeUserValue(Integer userId, Integer userAttributeId) throws ApiException {
        deleteUserAttributeUserValueWithHttpInfo(userId, userAttributeId);
    }

    /**
     * Delete User Attribute User Value
     * ### Delete a user attribute value from a user&#x27;s account settings.  After the user attribute value is deleted from the user&#x27;s account settings, subsequent requests for the user attribute value for this user will draw from the user&#x27;s groups or the default value of the user attribute. See [Get User Attribute Values](#!/User/user_attribute_user_values) for more information about how user attribute values are resolved. 
     * @param userId Id of user (required)
     * @param userAttributeId Id of user attribute (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserAttributeUserValueWithHttpInfo(Integer userId, Integer userAttributeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserAttributeUserValueValidateBeforeCall(userId, userAttributeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete User Attribute User Value (asynchronously)
     * ### Delete a user attribute value from a user&#x27;s account settings.  After the user attribute value is deleted from the user&#x27;s account settings, subsequent requests for the user attribute value for this user will draw from the user&#x27;s groups or the default value of the user attribute. See [Get User Attribute Values](#!/User/user_attribute_user_values) for more information about how user attribute values are resolved. 
     * @param userId Id of user (required)
     * @param userAttributeId Id of user attribute (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAttributeUserValueAsync(Integer userId, Integer userAttributeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserAttributeUserValueValidateBeforeCall(userId, userAttributeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteUserCredentialsApi
     * @param userId id of user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsApiCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_api"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserCredentialsApiValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserCredentialsApi(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserCredentialsApiCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete API Credential
     * ### API login information for the specified user. This is for &#x27;API Users&#x27; used for the &#x27;old&#x27; query API. THIS SUPPORT HAS BEEN REMOVED.
     * @param userId id of user (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUserCredentialsApi(Integer userId) throws ApiException {
        ApiResponse<String> resp = deleteUserCredentialsApiWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Delete API Credential
     * ### API login information for the specified user. This is for &#x27;API Users&#x27; used for the &#x27;old&#x27; query API. THIS SUPPORT HAS BEEN REMOVED.
     * @param userId id of user (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserCredentialsApiWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCredentialsApiValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete API Credential (asynchronously)
     * ### API login information for the specified user. This is for &#x27;API Users&#x27; used for the &#x27;old&#x27; query API. THIS SUPPORT HAS BEEN REMOVED.
     * @param userId id of user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsApiAsync(Integer userId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCredentialsApiValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserCredentialsApi3
     * @param userId id of user (required)
     * @param credentialsApi3Id id of API 3 Credential (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsApi3Call(Integer userId, Integer credentialsApi3Id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_api3/{credentials_api3_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "credentials_api3_id" + "\\}", apiClient.escapeString(credentialsApi3Id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserCredentialsApi3ValidateBeforeCall(Integer userId, Integer credentialsApi3Id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserCredentialsApi3(Async)");
        }
        // verify the required parameter 'credentialsApi3Id' is set
        if (credentialsApi3Id == null) {
            throw new ApiException("Missing the required parameter 'credentialsApi3Id' when calling deleteUserCredentialsApi3(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserCredentialsApi3Call(userId, credentialsApi3Id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete API 3 Credential
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param userId id of user (required)
     * @param credentialsApi3Id id of API 3 Credential (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUserCredentialsApi3(Integer userId, Integer credentialsApi3Id) throws ApiException {
        ApiResponse<String> resp = deleteUserCredentialsApi3WithHttpInfo(userId, credentialsApi3Id);
        return resp.getData();
    }

    /**
     * Delete API 3 Credential
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param userId id of user (required)
     * @param credentialsApi3Id id of API 3 Credential (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserCredentialsApi3WithHttpInfo(Integer userId, Integer credentialsApi3Id) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCredentialsApi3ValidateBeforeCall(userId, credentialsApi3Id, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete API 3 Credential (asynchronously)
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param userId id of user (required)
     * @param credentialsApi3Id id of API 3 Credential (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsApi3Async(Integer userId, Integer credentialsApi3Id, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCredentialsApi3ValidateBeforeCall(userId, credentialsApi3Id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserCredentialsEmail
     * @param userId id of user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsEmailCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_email"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserCredentialsEmailValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserCredentialsEmail(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserCredentialsEmailCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Email/Password Credential
     * ### Email/password login information for the specified user.
     * @param userId id of user (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUserCredentialsEmail(Integer userId) throws ApiException {
        ApiResponse<String> resp = deleteUserCredentialsEmailWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Delete Email/Password Credential
     * ### Email/password login information for the specified user.
     * @param userId id of user (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserCredentialsEmailWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCredentialsEmailValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Email/Password Credential (asynchronously)
     * ### Email/password login information for the specified user.
     * @param userId id of user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsEmailAsync(Integer userId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCredentialsEmailValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserCredentialsEmbed
     * @param userId id of user (required)
     * @param credentialsEmbedId id of Embedding Credential (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsEmbedCall(Integer userId, Integer credentialsEmbedId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_embed/{credentials_embed_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "credentials_embed_id" + "\\}", apiClient.escapeString(credentialsEmbedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserCredentialsEmbedValidateBeforeCall(Integer userId, Integer credentialsEmbedId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserCredentialsEmbed(Async)");
        }
        // verify the required parameter 'credentialsEmbedId' is set
        if (credentialsEmbedId == null) {
            throw new ApiException("Missing the required parameter 'credentialsEmbedId' when calling deleteUserCredentialsEmbed(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserCredentialsEmbedCall(userId, credentialsEmbedId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Embedding Credential
     * ### Embed login information for the specified user.
     * @param userId id of user (required)
     * @param credentialsEmbedId id of Embedding Credential (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUserCredentialsEmbed(Integer userId, Integer credentialsEmbedId) throws ApiException {
        ApiResponse<String> resp = deleteUserCredentialsEmbedWithHttpInfo(userId, credentialsEmbedId);
        return resp.getData();
    }

    /**
     * Delete Embedding Credential
     * ### Embed login information for the specified user.
     * @param userId id of user (required)
     * @param credentialsEmbedId id of Embedding Credential (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserCredentialsEmbedWithHttpInfo(Integer userId, Integer credentialsEmbedId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCredentialsEmbedValidateBeforeCall(userId, credentialsEmbedId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Embedding Credential (asynchronously)
     * ### Embed login information for the specified user.
     * @param userId id of user (required)
     * @param credentialsEmbedId id of Embedding Credential (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsEmbedAsync(Integer userId, Integer credentialsEmbedId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCredentialsEmbedValidateBeforeCall(userId, credentialsEmbedId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserCredentialsGoogle
     * @param userId id of user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsGoogleCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_google"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserCredentialsGoogleValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserCredentialsGoogle(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserCredentialsGoogleCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Google Auth Credential
     * ### Google authentication login information for the specified user.
     * @param userId id of user (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUserCredentialsGoogle(Integer userId) throws ApiException {
        ApiResponse<String> resp = deleteUserCredentialsGoogleWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Delete Google Auth Credential
     * ### Google authentication login information for the specified user.
     * @param userId id of user (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserCredentialsGoogleWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCredentialsGoogleValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Google Auth Credential (asynchronously)
     * ### Google authentication login information for the specified user.
     * @param userId id of user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsGoogleAsync(Integer userId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCredentialsGoogleValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserCredentialsLdap
     * @param userId id of user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsLdapCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_ldap"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserCredentialsLdapValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserCredentialsLdap(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserCredentialsLdapCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete LDAP Credential
     * ### LDAP login information for the specified user.
     * @param userId id of user (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUserCredentialsLdap(Integer userId) throws ApiException {
        ApiResponse<String> resp = deleteUserCredentialsLdapWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Delete LDAP Credential
     * ### LDAP login information for the specified user.
     * @param userId id of user (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserCredentialsLdapWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCredentialsLdapValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete LDAP Credential (asynchronously)
     * ### LDAP login information for the specified user.
     * @param userId id of user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsLdapAsync(Integer userId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCredentialsLdapValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserCredentialsLookerOpenid
     * @param userId id of user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsLookerOpenidCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_looker_openid"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserCredentialsLookerOpenidValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserCredentialsLookerOpenid(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserCredentialsLookerOpenidCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Looker OpenId Credential
     * ### Looker Openid login information for the specified user. Used by Looker Analysts.
     * @param userId id of user (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUserCredentialsLookerOpenid(Integer userId) throws ApiException {
        ApiResponse<String> resp = deleteUserCredentialsLookerOpenidWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Delete Looker OpenId Credential
     * ### Looker Openid login information for the specified user. Used by Looker Analysts.
     * @param userId id of user (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserCredentialsLookerOpenidWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCredentialsLookerOpenidValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Looker OpenId Credential (asynchronously)
     * ### Looker Openid login information for the specified user. Used by Looker Analysts.
     * @param userId id of user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsLookerOpenidAsync(Integer userId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCredentialsLookerOpenidValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserCredentialsOidc
     * @param userId id of user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsOidcCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_oidc"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserCredentialsOidcValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserCredentialsOidc(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserCredentialsOidcCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete OIDC Auth Credential
     * ### OpenID Connect (OIDC) authentication login information for the specified user.
     * @param userId id of user (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUserCredentialsOidc(Integer userId) throws ApiException {
        ApiResponse<String> resp = deleteUserCredentialsOidcWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Delete OIDC Auth Credential
     * ### OpenID Connect (OIDC) authentication login information for the specified user.
     * @param userId id of user (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserCredentialsOidcWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCredentialsOidcValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete OIDC Auth Credential (asynchronously)
     * ### OpenID Connect (OIDC) authentication login information for the specified user.
     * @param userId id of user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsOidcAsync(Integer userId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCredentialsOidcValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserCredentialsSaml
     * @param userId id of user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsSamlCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_saml"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserCredentialsSamlValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserCredentialsSaml(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserCredentialsSamlCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Saml Auth Credential
     * ### Saml authentication login information for the specified user.
     * @param userId id of user (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUserCredentialsSaml(Integer userId) throws ApiException {
        ApiResponse<String> resp = deleteUserCredentialsSamlWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Delete Saml Auth Credential
     * ### Saml authentication login information for the specified user.
     * @param userId id of user (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserCredentialsSamlWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCredentialsSamlValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Saml Auth Credential (asynchronously)
     * ### Saml authentication login information for the specified user.
     * @param userId id of user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsSamlAsync(Integer userId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCredentialsSamlValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserCredentialsTotp
     * @param userId id of user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsTotpCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_totp"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserCredentialsTotpValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserCredentialsTotp(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserCredentialsTotpCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Two-Factor Credential
     * ### Two-factor login information for the specified user.
     * @param userId id of user (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUserCredentialsTotp(Integer userId) throws ApiException {
        ApiResponse<String> resp = deleteUserCredentialsTotpWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Delete Two-Factor Credential
     * ### Two-factor login information for the specified user.
     * @param userId id of user (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserCredentialsTotpWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCredentialsTotpValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Two-Factor Credential (asynchronously)
     * ### Two-factor login information for the specified user.
     * @param userId id of user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserCredentialsTotpAsync(Integer userId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCredentialsTotpValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserSession
     * @param userId id of user (required)
     * @param sessionId id of Web Login Session (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserSessionCall(Integer userId, Integer sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/sessions/{session_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "session_id" + "\\}", apiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserSessionValidateBeforeCall(Integer userId, Integer sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUserSession(Async)");
        }
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling deleteUserSession(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteUserSessionCall(userId, sessionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Web Login Session
     * ### Web login session for the specified user.
     * @param userId id of user (required)
     * @param sessionId id of Web Login Session (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteUserSession(Integer userId, Integer sessionId) throws ApiException {
        ApiResponse<String> resp = deleteUserSessionWithHttpInfo(userId, sessionId);
        return resp.getData();
    }

    /**
     * Delete Web Login Session
     * ### Web login session for the specified user.
     * @param userId id of user (required)
     * @param sessionId id of Web Login Session (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteUserSessionWithHttpInfo(Integer userId, Integer sessionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserSessionValidateBeforeCall(userId, sessionId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Web Login Session (asynchronously)
     * ### Web login session for the specified user.
     * @param userId id of user (required)
     * @param sessionId id of Web Login Session (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserSessionAsync(Integer userId, Integer sessionId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserSessionValidateBeforeCall(userId, sessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for me
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call meCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call meValidateBeforeCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = meCall(fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Current User
     * ### Get information about the current user; i.e. the user account currently calling the API. 
     * @param fields Requested fields. (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User me(String fields) throws ApiException {
        ApiResponse<User> resp = meWithHttpInfo(fields);
        return resp.getData();
    }

    /**
     * Get Current User
     * ### Get information about the current user; i.e. the user account currently calling the API. 
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> meWithHttpInfo(String fields) throws ApiException {
        com.squareup.okhttp.Call call = meValidateBeforeCall(fields, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Current User (asynchronously)
     * ### Get information about the current user; i.e. the user account currently calling the API. 
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call meAsync(String fields, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = meValidateBeforeCall(fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchUsers
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param id Match User Id. (optional)
     * @param firstName Match First name. (optional)
     * @param lastName Match Last name. (optional)
     * @param verifiedLookerEmployee Match Verified Looker employee. (optional)
     * @param email Match Email Address. (optional)
     * @param isDisabled Match Is disabled. (optional)
     * @param filterOr Do an OR search with parameters (optional)
     * @param contentMetadataId Id of content metadata to which users must have access (optional)
     * @param groupId Id of group of which users must be directly members (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchUsersCall(String fields, Integer page, Integer perPage, String sorts, Integer id, String firstName, String lastName, Boolean verifiedLookerEmployee, String email, Boolean isDisabled, Boolean filterOr, Integer contentMetadataId, Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        if (sorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorts", sorts));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (firstName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("first_name", firstName));
        if (lastName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_name", lastName));
        if (verifiedLookerEmployee != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("verified_looker_employee", verifiedLookerEmployee));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
        if (isDisabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_disabled", isDisabled));
        if (filterOr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter_or", filterOr));
        if (contentMetadataId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("content_metadata_id", contentMetadataId));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group_id", groupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchUsersValidateBeforeCall(String fields, Integer page, Integer perPage, String sorts, Integer id, String firstName, String lastName, Boolean verifiedLookerEmployee, String email, Boolean isDisabled, Boolean filterOr, Integer contentMetadataId, Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = searchUsersCall(fields, page, perPage, sorts, id, firstName, lastName, verifiedLookerEmployee, email, isDisabled, filterOr, contentMetadataId, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search Users
     * ### Search users. 
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param id Match User Id. (optional)
     * @param firstName Match First name. (optional)
     * @param lastName Match Last name. (optional)
     * @param verifiedLookerEmployee Match Verified Looker employee. (optional)
     * @param email Match Email Address. (optional)
     * @param isDisabled Match Is disabled. (optional)
     * @param filterOr Do an OR search with parameters (optional)
     * @param contentMetadataId Id of content metadata to which users must have access (optional)
     * @param groupId Id of group of which users must be directly members (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<User> searchUsers(String fields, Integer page, Integer perPage, String sorts, Integer id, String firstName, String lastName, Boolean verifiedLookerEmployee, String email, Boolean isDisabled, Boolean filterOr, Integer contentMetadataId, Integer groupId) throws ApiException {
        ApiResponse<List<User>> resp = searchUsersWithHttpInfo(fields, page, perPage, sorts, id, firstName, lastName, verifiedLookerEmployee, email, isDisabled, filterOr, contentMetadataId, groupId);
        return resp.getData();
    }

    /**
     * Search Users
     * ### Search users. 
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param id Match User Id. (optional)
     * @param firstName Match First name. (optional)
     * @param lastName Match Last name. (optional)
     * @param verifiedLookerEmployee Match Verified Looker employee. (optional)
     * @param email Match Email Address. (optional)
     * @param isDisabled Match Is disabled. (optional)
     * @param filterOr Do an OR search with parameters (optional)
     * @param contentMetadataId Id of content metadata to which users must have access (optional)
     * @param groupId Id of group of which users must be directly members (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<User>> searchUsersWithHttpInfo(String fields, Integer page, Integer perPage, String sorts, Integer id, String firstName, String lastName, Boolean verifiedLookerEmployee, String email, Boolean isDisabled, Boolean filterOr, Integer contentMetadataId, Integer groupId) throws ApiException {
        com.squareup.okhttp.Call call = searchUsersValidateBeforeCall(fields, page, perPage, sorts, id, firstName, lastName, verifiedLookerEmployee, email, isDisabled, filterOr, contentMetadataId, groupId, null, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Users (asynchronously)
     * ### Search users. 
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param id Match User Id. (optional)
     * @param firstName Match First name. (optional)
     * @param lastName Match Last name. (optional)
     * @param verifiedLookerEmployee Match Verified Looker employee. (optional)
     * @param email Match Email Address. (optional)
     * @param isDisabled Match Is disabled. (optional)
     * @param filterOr Do an OR search with parameters (optional)
     * @param contentMetadataId Id of content metadata to which users must have access (optional)
     * @param groupId Id of group of which users must be directly members (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchUsersAsync(String fields, Integer page, Integer perPage, String sorts, Integer id, String firstName, String lastName, Boolean verifiedLookerEmployee, String email, Boolean isDisabled, Boolean filterOr, Integer contentMetadataId, Integer groupId, final ApiCallback<List<User>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchUsersValidateBeforeCall(fields, page, perPage, sorts, id, firstName, lastName, verifiedLookerEmployee, email, isDisabled, filterOr, contentMetadataId, groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchUsersNames
     * @param pattern Pattern to match. (required)
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param id Match User Id. (optional)
     * @param firstName Match First name. (optional)
     * @param lastName Match Last name. (optional)
     * @param verifiedLookerEmployee Match Verified Looker employee. (optional)
     * @param email Match Email Address. (optional)
     * @param isDisabled Match Is disabled. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchUsersNamesCall(String pattern, String fields, Integer page, Integer perPage, String sorts, Integer id, String firstName, String lastName, Boolean verifiedLookerEmployee, String email, Boolean isDisabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/search/names/{pattern}"
            .replaceAll("\\{" + "pattern" + "\\}", apiClient.escapeString(pattern.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        if (sorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorts", sorts));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (firstName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("first_name", firstName));
        if (lastName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_name", lastName));
        if (verifiedLookerEmployee != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("verified_looker_employee", verifiedLookerEmployee));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
        if (isDisabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_disabled", isDisabled));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchUsersNamesValidateBeforeCall(String pattern, String fields, Integer page, Integer perPage, String sorts, Integer id, String firstName, String lastName, Boolean verifiedLookerEmployee, String email, Boolean isDisabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pattern' is set
        if (pattern == null) {
            throw new ApiException("Missing the required parameter 'pattern' when calling searchUsersNames(Async)");
        }
        
        com.squareup.okhttp.Call call = searchUsersNamesCall(pattern, fields, page, perPage, sorts, id, firstName, lastName, verifiedLookerEmployee, email, isDisabled, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search User Names
     * ### Search users where first_name OR last_name OR email matches a string.  The results will be AND&#x27;d with any additional search parameters that are (optionally) included. 
     * @param pattern Pattern to match. (required)
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param id Match User Id. (optional)
     * @param firstName Match First name. (optional)
     * @param lastName Match Last name. (optional)
     * @param verifiedLookerEmployee Match Verified Looker employee. (optional)
     * @param email Match Email Address. (optional)
     * @param isDisabled Match Is disabled. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<User> searchUsersNames(String pattern, String fields, Integer page, Integer perPage, String sorts, Integer id, String firstName, String lastName, Boolean verifiedLookerEmployee, String email, Boolean isDisabled) throws ApiException {
        ApiResponse<List<User>> resp = searchUsersNamesWithHttpInfo(pattern, fields, page, perPage, sorts, id, firstName, lastName, verifiedLookerEmployee, email, isDisabled);
        return resp.getData();
    }

    /**
     * Search User Names
     * ### Search users where first_name OR last_name OR email matches a string.  The results will be AND&#x27;d with any additional search parameters that are (optionally) included. 
     * @param pattern Pattern to match. (required)
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param id Match User Id. (optional)
     * @param firstName Match First name. (optional)
     * @param lastName Match Last name. (optional)
     * @param verifiedLookerEmployee Match Verified Looker employee. (optional)
     * @param email Match Email Address. (optional)
     * @param isDisabled Match Is disabled. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<User>> searchUsersNamesWithHttpInfo(String pattern, String fields, Integer page, Integer perPage, String sorts, Integer id, String firstName, String lastName, Boolean verifiedLookerEmployee, String email, Boolean isDisabled) throws ApiException {
        com.squareup.okhttp.Call call = searchUsersNamesValidateBeforeCall(pattern, fields, page, perPage, sorts, id, firstName, lastName, verifiedLookerEmployee, email, isDisabled, null, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search User Names (asynchronously)
     * ### Search users where first_name OR last_name OR email matches a string.  The results will be AND&#x27;d with any additional search parameters that are (optionally) included. 
     * @param pattern Pattern to match. (required)
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param id Match User Id. (optional)
     * @param firstName Match First name. (optional)
     * @param lastName Match Last name. (optional)
     * @param verifiedLookerEmployee Match Verified Looker employee. (optional)
     * @param email Match Email Address. (optional)
     * @param isDisabled Match Is disabled. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchUsersNamesAsync(String pattern, String fields, Integer page, Integer perPage, String sorts, Integer id, String firstName, String lastName, Boolean verifiedLookerEmployee, String email, Boolean isDisabled, final ApiCallback<List<User>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchUsersNamesValidateBeforeCall(pattern, fields, page, perPage, sorts, id, firstName, lastName, verifiedLookerEmployee, email, isDisabled, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setUserAttributeUserValue
     * @param body New attribute value for user. (required)
     * @param userId Id of user (required)
     * @param userAttributeId Id of user attribute (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setUserAttributeUserValueCall(UserAttributeWithValue body, Integer userId, Integer userAttributeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/attribute_values/{user_attribute_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "user_attribute_id" + "\\}", apiClient.escapeString(userAttributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setUserAttributeUserValueValidateBeforeCall(UserAttributeWithValue body, Integer userId, Integer userAttributeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setUserAttributeUserValue(Async)");
        }
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setUserAttributeUserValue(Async)");
        }
        // verify the required parameter 'userAttributeId' is set
        if (userAttributeId == null) {
            throw new ApiException("Missing the required parameter 'userAttributeId' when calling setUserAttributeUserValue(Async)");
        }
        
        com.squareup.okhttp.Call call = setUserAttributeUserValueCall(body, userId, userAttributeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set User Attribute User Value
     * ### Store a custom value for a user attribute in a user&#x27;s account settings.  Per-user user attribute values take precedence over group or default values. 
     * @param body New attribute value for user. (required)
     * @param userId Id of user (required)
     * @param userAttributeId Id of user attribute (required)
     * @return UserAttributeWithValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserAttributeWithValue setUserAttributeUserValue(UserAttributeWithValue body, Integer userId, Integer userAttributeId) throws ApiException {
        ApiResponse<UserAttributeWithValue> resp = setUserAttributeUserValueWithHttpInfo(body, userId, userAttributeId);
        return resp.getData();
    }

    /**
     * Set User Attribute User Value
     * ### Store a custom value for a user attribute in a user&#x27;s account settings.  Per-user user attribute values take precedence over group or default values. 
     * @param body New attribute value for user. (required)
     * @param userId Id of user (required)
     * @param userAttributeId Id of user attribute (required)
     * @return ApiResponse&lt;UserAttributeWithValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserAttributeWithValue> setUserAttributeUserValueWithHttpInfo(UserAttributeWithValue body, Integer userId, Integer userAttributeId) throws ApiException {
        com.squareup.okhttp.Call call = setUserAttributeUserValueValidateBeforeCall(body, userId, userAttributeId, null, null);
        Type localVarReturnType = new TypeToken<UserAttributeWithValue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set User Attribute User Value (asynchronously)
     * ### Store a custom value for a user attribute in a user&#x27;s account settings.  Per-user user attribute values take precedence over group or default values. 
     * @param body New attribute value for user. (required)
     * @param userId Id of user (required)
     * @param userAttributeId Id of user attribute (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setUserAttributeUserValueAsync(UserAttributeWithValue body, Integer userId, Integer userAttributeId, final ApiCallback<UserAttributeWithValue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setUserAttributeUserValueValidateBeforeCall(body, userId, userAttributeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserAttributeWithValue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setUserRoles
     * @param body array of roles ids for user (required)
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setUserRolesCall(List<Long> body, Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/roles"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setUserRolesValidateBeforeCall(List<Long> body, Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setUserRoles(Async)");
        }
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setUserRoles(Async)");
        }
        
        com.squareup.okhttp.Call call = setUserRolesCall(body, userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set User Roles
     * ### Set roles of the user with a specific id. 
     * @param body array of roles ids for user (required)
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return List&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Role> setUserRoles(List<Long> body, Integer userId, String fields) throws ApiException {
        ApiResponse<List<Role>> resp = setUserRolesWithHttpInfo(body, userId, fields);
        return resp.getData();
    }

    /**
     * Set User Roles
     * ### Set roles of the user with a specific id. 
     * @param body array of roles ids for user (required)
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;Role&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Role>> setUserRolesWithHttpInfo(List<Long> body, Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = setUserRolesValidateBeforeCall(body, userId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set User Roles (asynchronously)
     * ### Set roles of the user with a specific id. 
     * @param body array of roles ids for user (required)
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setUserRolesAsync(List<Long> body, Integer userId, String fields, final ApiCallback<List<Role>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setUserRolesValidateBeforeCall(body, userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUser
     * @param body User (required)
     * @param userId Id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserCall(User body, Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserValidateBeforeCall(User body, Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUser(Async)");
        }
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUser(Async)");
        }
        
        com.squareup.okhttp.Call call = updateUserCall(body, userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update User
     * ### Update information about the user with a specific id. 
     * @param body User (required)
     * @param userId Id of user (required)
     * @param fields Requested fields. (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User updateUser(User body, Integer userId, String fields) throws ApiException {
        ApiResponse<User> resp = updateUserWithHttpInfo(body, userId, fields);
        return resp.getData();
    }

    /**
     * Update User
     * ### Update information about the user with a specific id. 
     * @param body User (required)
     * @param userId Id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> updateUserWithHttpInfo(User body, Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(body, userId, fields, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update User (asynchronously)
     * ### Update information about the user with a specific id. 
     * @param body User (required)
     * @param userId Id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAsync(User body, Integer userId, String fields, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(body, userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUserAccessFilter
     * @param body Access Filter (required)
     * @param userId id of user (required)
     * @param accessFilterId id of Access Filter (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserAccessFilterCall(AccessFilter body, Integer userId, Integer accessFilterId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/access_filters/{access_filter_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "access_filter_id" + "\\}", apiClient.escapeString(accessFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserAccessFilterValidateBeforeCall(AccessFilter body, Integer userId, Integer accessFilterId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUserAccessFilter(Async)");
        }
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserAccessFilter(Async)");
        }
        // verify the required parameter 'accessFilterId' is set
        if (accessFilterId == null) {
            throw new ApiException("Missing the required parameter 'accessFilterId' when calling updateUserAccessFilter(Async)");
        }
        
        com.squareup.okhttp.Call call = updateUserAccessFilterCall(body, userId, accessFilterId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Access Filter
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param body Access Filter (required)
     * @param userId id of user (required)
     * @param accessFilterId id of Access Filter (required)
     * @param fields Requested fields. (optional)
     * @return AccessFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessFilter updateUserAccessFilter(AccessFilter body, Integer userId, Integer accessFilterId, String fields) throws ApiException {
        ApiResponse<AccessFilter> resp = updateUserAccessFilterWithHttpInfo(body, userId, accessFilterId, fields);
        return resp.getData();
    }

    /**
     * Update Access Filter
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param body Access Filter (required)
     * @param userId id of user (required)
     * @param accessFilterId id of Access Filter (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;AccessFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessFilter> updateUserAccessFilterWithHttpInfo(AccessFilter body, Integer userId, Integer accessFilterId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateUserAccessFilterValidateBeforeCall(body, userId, accessFilterId, fields, null, null);
        Type localVarReturnType = new TypeToken<AccessFilter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Access Filter (asynchronously)
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param body Access Filter (required)
     * @param userId id of user (required)
     * @param accessFilterId id of Access Filter (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAccessFilterAsync(AccessFilter body, Integer userId, Integer accessFilterId, String fields, final ApiCallback<AccessFilter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserAccessFilterValidateBeforeCall(body, userId, accessFilterId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessFilter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUserCredentialsEmail
     * @param body Email/Password Credential (required)
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserCredentialsEmailCall(CredentialsEmail body, Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_email"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserCredentialsEmailValidateBeforeCall(CredentialsEmail body, Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUserCredentialsEmail(Async)");
        }
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserCredentialsEmail(Async)");
        }
        
        com.squareup.okhttp.Call call = updateUserCredentialsEmailCall(body, userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Email/Password Credential
     * ### Email/password login information for the specified user.
     * @param body Email/Password Credential (required)
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return CredentialsEmail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsEmail updateUserCredentialsEmail(CredentialsEmail body, Integer userId, String fields) throws ApiException {
        ApiResponse<CredentialsEmail> resp = updateUserCredentialsEmailWithHttpInfo(body, userId, fields);
        return resp.getData();
    }

    /**
     * Update Email/Password Credential
     * ### Email/password login information for the specified user.
     * @param body Email/Password Credential (required)
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsEmail> updateUserCredentialsEmailWithHttpInfo(CredentialsEmail body, Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateUserCredentialsEmailValidateBeforeCall(body, userId, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsEmail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Email/Password Credential (asynchronously)
     * ### Email/password login information for the specified user.
     * @param body Email/Password Credential (required)
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserCredentialsEmailAsync(CredentialsEmail body, Integer userId, String fields, final ApiCallback<CredentialsEmail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserCredentialsEmailValidateBeforeCall(body, userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsEmail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for user
     * @param userId Id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling user(Async)");
        }
        
        com.squareup.okhttp.Call call = userCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get User by Id
     * ### Get information about the user with a specific id.  If the caller is an admin or the caller is the user being specified, then full user information will be returned. Otherwise, a minimal &#x27;public&#x27; variant of the user information will be returned. This contains The user name and avatar url, but no sensitive information. 
     * @param userId Id of user (required)
     * @param fields Requested fields. (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User user(Integer userId, String fields) throws ApiException {
        ApiResponse<User> resp = userWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get User by Id
     * ### Get information about the user with a specific id.  If the caller is an admin or the caller is the user being specified, then full user information will be returned. Otherwise, a minimal &#x27;public&#x27; variant of the user information will be returned. This contains The user name and avatar url, but no sensitive information. 
     * @param userId Id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> userWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get User by Id (asynchronously)
     * ### Get information about the user with a specific id.  If the caller is an admin or the caller is the user being specified, then full user information will be returned. Otherwise, a minimal &#x27;public&#x27; variant of the user information will be returned. This contains The user name and avatar url, but no sensitive information. 
     * @param userId Id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userAsync(Integer userId, String fields, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userAccessFilter
     * @param userId Id of user (required)
     * @param accessFilterId Id of Access Filter (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userAccessFilterCall(Integer userId, Integer accessFilterId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/access_filters/{access_filter_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "access_filter_id" + "\\}", apiClient.escapeString(accessFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userAccessFilterValidateBeforeCall(Integer userId, Integer accessFilterId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userAccessFilter(Async)");
        }
        // verify the required parameter 'accessFilterId' is set
        if (accessFilterId == null) {
            throw new ApiException("Missing the required parameter 'accessFilterId' when calling userAccessFilter(Async)");
        }
        
        com.squareup.okhttp.Call call = userAccessFilterCall(userId, accessFilterId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Access Filter
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param userId Id of user (required)
     * @param accessFilterId Id of Access Filter (required)
     * @param fields Requested fields. (optional)
     * @return AccessFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessFilter userAccessFilter(Integer userId, Integer accessFilterId, String fields) throws ApiException {
        ApiResponse<AccessFilter> resp = userAccessFilterWithHttpInfo(userId, accessFilterId, fields);
        return resp.getData();
    }

    /**
     * Get Access Filter
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param userId Id of user (required)
     * @param accessFilterId Id of Access Filter (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;AccessFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessFilter> userAccessFilterWithHttpInfo(Integer userId, Integer accessFilterId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userAccessFilterValidateBeforeCall(userId, accessFilterId, fields, null, null);
        Type localVarReturnType = new TypeToken<AccessFilter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Access Filter (asynchronously)
     * ### NOTE: this feature is completely end of life and has been removed from the product.
     * @param userId Id of user (required)
     * @param accessFilterId Id of Access Filter (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userAccessFilterAsync(Integer userId, Integer accessFilterId, String fields, final ApiCallback<AccessFilter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userAccessFilterValidateBeforeCall(userId, accessFilterId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessFilter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userAttributeUserValues
     * @param userId Id of user (required)
     * @param fields Requested fields. (optional)
     * @param userAttributeIds Specific user attributes to request. Omit or leave blank to request all user attributes. (optional)
     * @param allValues If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence. (optional)
     * @param includeUnset If true, returns an empty record for each requested attribute that has no user, group, or default value. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userAttributeUserValuesCall(Integer userId, String fields, List<Long> userAttributeIds, Boolean allValues, Boolean includeUnset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/attribute_values"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (userAttributeIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "user_attribute_ids", userAttributeIds));
        if (allValues != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("all_values", allValues));
        if (includeUnset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_unset", includeUnset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userAttributeUserValuesValidateBeforeCall(Integer userId, String fields, List<Long> userAttributeIds, Boolean allValues, Boolean includeUnset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userAttributeUserValues(Async)");
        }
        
        com.squareup.okhttp.Call call = userAttributeUserValuesCall(userId, fields, userAttributeIds, allValues, includeUnset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get User Attribute Values
     * ### Get user attribute values for a given user.  Returns the values of specified user attributes (or all user attributes) for a certain user.  A value for each user attribute is searched for in the following locations, in this order: 1. in the user&#x27;s account information 1. in groups that the user is a member of 1. the default value of the user attribute  If more than one group has a value defined for a user attribute, the group with the lowest rank wins.  The response will only include user attributes for which values were found. Use &#x60;include_unset&#x3D;true&#x60; to include empty records for user attributes with no value.  The value of all hidden user attributes will be blank. 
     * @param userId Id of user (required)
     * @param fields Requested fields. (optional)
     * @param userAttributeIds Specific user attributes to request. Omit or leave blank to request all user attributes. (optional)
     * @param allValues If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence. (optional)
     * @param includeUnset If true, returns an empty record for each requested attribute that has no user, group, or default value. (optional)
     * @return List&lt;UserAttributeWithValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserAttributeWithValue> userAttributeUserValues(Integer userId, String fields, List<Long> userAttributeIds, Boolean allValues, Boolean includeUnset) throws ApiException {
        ApiResponse<List<UserAttributeWithValue>> resp = userAttributeUserValuesWithHttpInfo(userId, fields, userAttributeIds, allValues, includeUnset);
        return resp.getData();
    }

    /**
     * Get User Attribute Values
     * ### Get user attribute values for a given user.  Returns the values of specified user attributes (or all user attributes) for a certain user.  A value for each user attribute is searched for in the following locations, in this order: 1. in the user&#x27;s account information 1. in groups that the user is a member of 1. the default value of the user attribute  If more than one group has a value defined for a user attribute, the group with the lowest rank wins.  The response will only include user attributes for which values were found. Use &#x60;include_unset&#x3D;true&#x60; to include empty records for user attributes with no value.  The value of all hidden user attributes will be blank. 
     * @param userId Id of user (required)
     * @param fields Requested fields. (optional)
     * @param userAttributeIds Specific user attributes to request. Omit or leave blank to request all user attributes. (optional)
     * @param allValues If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence. (optional)
     * @param includeUnset If true, returns an empty record for each requested attribute that has no user, group, or default value. (optional)
     * @return ApiResponse&lt;List&lt;UserAttributeWithValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserAttributeWithValue>> userAttributeUserValuesWithHttpInfo(Integer userId, String fields, List<Long> userAttributeIds, Boolean allValues, Boolean includeUnset) throws ApiException {
        com.squareup.okhttp.Call call = userAttributeUserValuesValidateBeforeCall(userId, fields, userAttributeIds, allValues, includeUnset, null, null);
        Type localVarReturnType = new TypeToken<List<UserAttributeWithValue>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get User Attribute Values (asynchronously)
     * ### Get user attribute values for a given user.  Returns the values of specified user attributes (or all user attributes) for a certain user.  A value for each user attribute is searched for in the following locations, in this order: 1. in the user&#x27;s account information 1. in groups that the user is a member of 1. the default value of the user attribute  If more than one group has a value defined for a user attribute, the group with the lowest rank wins.  The response will only include user attributes for which values were found. Use &#x60;include_unset&#x3D;true&#x60; to include empty records for user attributes with no value.  The value of all hidden user attributes will be blank. 
     * @param userId Id of user (required)
     * @param fields Requested fields. (optional)
     * @param userAttributeIds Specific user attributes to request. Omit or leave blank to request all user attributes. (optional)
     * @param allValues If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence. (optional)
     * @param includeUnset If true, returns an empty record for each requested attribute that has no user, group, or default value. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userAttributeUserValuesAsync(Integer userId, String fields, List<Long> userAttributeIds, Boolean allValues, Boolean includeUnset, final ApiCallback<List<UserAttributeWithValue>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userAttributeUserValuesValidateBeforeCall(userId, fields, userAttributeIds, allValues, includeUnset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserAttributeWithValue>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userCredentialsApi
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userCredentialsApiCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_api"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userCredentialsApiValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userCredentialsApi(Async)");
        }
        
        com.squareup.okhttp.Call call = userCredentialsApiCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get API Credential
     * ### API login information for the specified user. This is for &#x27;API Users&#x27; used for the &#x27;old&#x27; query API. THIS SUPPORT HAS BEEN REMOVED.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return CredentialsApi
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsApi userCredentialsApi(Integer userId, String fields) throws ApiException {
        ApiResponse<CredentialsApi> resp = userCredentialsApiWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get API Credential
     * ### API login information for the specified user. This is for &#x27;API Users&#x27; used for the &#x27;old&#x27; query API. THIS SUPPORT HAS BEEN REMOVED.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsApi&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsApi> userCredentialsApiWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userCredentialsApiValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsApi>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get API Credential (asynchronously)
     * ### API login information for the specified user. This is for &#x27;API Users&#x27; used for the &#x27;old&#x27; query API. THIS SUPPORT HAS BEEN REMOVED.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userCredentialsApiAsync(Integer userId, String fields, final ApiCallback<CredentialsApi> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userCredentialsApiValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsApi>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userCredentialsApi3
     * @param userId Id of user (required)
     * @param credentialsApi3Id Id of API 3 Credential (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userCredentialsApi3Call(Integer userId, Integer credentialsApi3Id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_api3/{credentials_api3_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "credentials_api3_id" + "\\}", apiClient.escapeString(credentialsApi3Id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userCredentialsApi3ValidateBeforeCall(Integer userId, Integer credentialsApi3Id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userCredentialsApi3(Async)");
        }
        // verify the required parameter 'credentialsApi3Id' is set
        if (credentialsApi3Id == null) {
            throw new ApiException("Missing the required parameter 'credentialsApi3Id' when calling userCredentialsApi3(Async)");
        }
        
        com.squareup.okhttp.Call call = userCredentialsApi3Call(userId, credentialsApi3Id, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get API 3 Credential
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param userId Id of user (required)
     * @param credentialsApi3Id Id of API 3 Credential (required)
     * @param fields Requested fields. (optional)
     * @return CredentialsApi3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsApi3 userCredentialsApi3(Integer userId, Integer credentialsApi3Id, String fields) throws ApiException {
        ApiResponse<CredentialsApi3> resp = userCredentialsApi3WithHttpInfo(userId, credentialsApi3Id, fields);
        return resp.getData();
    }

    /**
     * Get API 3 Credential
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param userId Id of user (required)
     * @param credentialsApi3Id Id of API 3 Credential (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsApi3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsApi3> userCredentialsApi3WithHttpInfo(Integer userId, Integer credentialsApi3Id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userCredentialsApi3ValidateBeforeCall(userId, credentialsApi3Id, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsApi3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get API 3 Credential (asynchronously)
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     * @param userId Id of user (required)
     * @param credentialsApi3Id Id of API 3 Credential (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userCredentialsApi3Async(Integer userId, Integer credentialsApi3Id, String fields, final ApiCallback<CredentialsApi3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userCredentialsApi3ValidateBeforeCall(userId, credentialsApi3Id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsApi3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userCredentialsEmail
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userCredentialsEmailCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_email"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userCredentialsEmailValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userCredentialsEmail(Async)");
        }
        
        com.squareup.okhttp.Call call = userCredentialsEmailCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Email/Password Credential
     * ### Email/password login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return CredentialsEmail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsEmail userCredentialsEmail(Integer userId, String fields) throws ApiException {
        ApiResponse<CredentialsEmail> resp = userCredentialsEmailWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get Email/Password Credential
     * ### Email/password login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsEmail> userCredentialsEmailWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userCredentialsEmailValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsEmail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Email/Password Credential (asynchronously)
     * ### Email/password login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userCredentialsEmailAsync(Integer userId, String fields, final ApiCallback<CredentialsEmail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userCredentialsEmailValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsEmail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userCredentialsEmbed
     * @param userId Id of user (required)
     * @param credentialsEmbedId Id of Embedding Credential (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userCredentialsEmbedCall(Integer userId, Integer credentialsEmbedId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_embed/{credentials_embed_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "credentials_embed_id" + "\\}", apiClient.escapeString(credentialsEmbedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userCredentialsEmbedValidateBeforeCall(Integer userId, Integer credentialsEmbedId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userCredentialsEmbed(Async)");
        }
        // verify the required parameter 'credentialsEmbedId' is set
        if (credentialsEmbedId == null) {
            throw new ApiException("Missing the required parameter 'credentialsEmbedId' when calling userCredentialsEmbed(Async)");
        }
        
        com.squareup.okhttp.Call call = userCredentialsEmbedCall(userId, credentialsEmbedId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Embedding Credential
     * ### Embed login information for the specified user.
     * @param userId Id of user (required)
     * @param credentialsEmbedId Id of Embedding Credential (required)
     * @param fields Requested fields. (optional)
     * @return CredentialsEmbed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsEmbed userCredentialsEmbed(Integer userId, Integer credentialsEmbedId, String fields) throws ApiException {
        ApiResponse<CredentialsEmbed> resp = userCredentialsEmbedWithHttpInfo(userId, credentialsEmbedId, fields);
        return resp.getData();
    }

    /**
     * Get Embedding Credential
     * ### Embed login information for the specified user.
     * @param userId Id of user (required)
     * @param credentialsEmbedId Id of Embedding Credential (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsEmbed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsEmbed> userCredentialsEmbedWithHttpInfo(Integer userId, Integer credentialsEmbedId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userCredentialsEmbedValidateBeforeCall(userId, credentialsEmbedId, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsEmbed>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Embedding Credential (asynchronously)
     * ### Embed login information for the specified user.
     * @param userId Id of user (required)
     * @param credentialsEmbedId Id of Embedding Credential (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userCredentialsEmbedAsync(Integer userId, Integer credentialsEmbedId, String fields, final ApiCallback<CredentialsEmbed> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userCredentialsEmbedValidateBeforeCall(userId, credentialsEmbedId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsEmbed>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userCredentialsGoogle
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userCredentialsGoogleCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_google"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userCredentialsGoogleValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userCredentialsGoogle(Async)");
        }
        
        com.squareup.okhttp.Call call = userCredentialsGoogleCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Google Auth Credential
     * ### Google authentication login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return CredentialsGoogle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsGoogle userCredentialsGoogle(Integer userId, String fields) throws ApiException {
        ApiResponse<CredentialsGoogle> resp = userCredentialsGoogleWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get Google Auth Credential
     * ### Google authentication login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsGoogle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsGoogle> userCredentialsGoogleWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userCredentialsGoogleValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsGoogle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Google Auth Credential (asynchronously)
     * ### Google authentication login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userCredentialsGoogleAsync(Integer userId, String fields, final ApiCallback<CredentialsGoogle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userCredentialsGoogleValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsGoogle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userCredentialsLdap
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userCredentialsLdapCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_ldap"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userCredentialsLdapValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userCredentialsLdap(Async)");
        }
        
        com.squareup.okhttp.Call call = userCredentialsLdapCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get LDAP Credential
     * ### LDAP login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return CredentialsLDAP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsLDAP userCredentialsLdap(Integer userId, String fields) throws ApiException {
        ApiResponse<CredentialsLDAP> resp = userCredentialsLdapWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get LDAP Credential
     * ### LDAP login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsLDAP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsLDAP> userCredentialsLdapWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userCredentialsLdapValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsLDAP>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get LDAP Credential (asynchronously)
     * ### LDAP login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userCredentialsLdapAsync(Integer userId, String fields, final ApiCallback<CredentialsLDAP> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userCredentialsLdapValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsLDAP>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userCredentialsLookerOpenid
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userCredentialsLookerOpenidCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_looker_openid"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userCredentialsLookerOpenidValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userCredentialsLookerOpenid(Async)");
        }
        
        com.squareup.okhttp.Call call = userCredentialsLookerOpenidCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Looker OpenId Credential
     * ### Looker Openid login information for the specified user. Used by Looker Analysts.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return CredentialsLookerOpenid
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsLookerOpenid userCredentialsLookerOpenid(Integer userId, String fields) throws ApiException {
        ApiResponse<CredentialsLookerOpenid> resp = userCredentialsLookerOpenidWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get Looker OpenId Credential
     * ### Looker Openid login information for the specified user. Used by Looker Analysts.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsLookerOpenid&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsLookerOpenid> userCredentialsLookerOpenidWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userCredentialsLookerOpenidValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsLookerOpenid>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Looker OpenId Credential (asynchronously)
     * ### Looker Openid login information for the specified user. Used by Looker Analysts.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userCredentialsLookerOpenidAsync(Integer userId, String fields, final ApiCallback<CredentialsLookerOpenid> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userCredentialsLookerOpenidValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsLookerOpenid>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userCredentialsOidc
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userCredentialsOidcCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_oidc"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userCredentialsOidcValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userCredentialsOidc(Async)");
        }
        
        com.squareup.okhttp.Call call = userCredentialsOidcCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get OIDC Auth Credential
     * ### OpenID Connect (OIDC) authentication login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return CredentialsOIDC
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsOIDC userCredentialsOidc(Integer userId, String fields) throws ApiException {
        ApiResponse<CredentialsOIDC> resp = userCredentialsOidcWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get OIDC Auth Credential
     * ### OpenID Connect (OIDC) authentication login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsOIDC&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsOIDC> userCredentialsOidcWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userCredentialsOidcValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsOIDC>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get OIDC Auth Credential (asynchronously)
     * ### OpenID Connect (OIDC) authentication login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userCredentialsOidcAsync(Integer userId, String fields, final ApiCallback<CredentialsOIDC> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userCredentialsOidcValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsOIDC>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userCredentialsSaml
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userCredentialsSamlCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_saml"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userCredentialsSamlValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userCredentialsSaml(Async)");
        }
        
        com.squareup.okhttp.Call call = userCredentialsSamlCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Saml Auth Credential
     * ### Saml authentication login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return CredentialsSaml
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsSaml userCredentialsSaml(Integer userId, String fields) throws ApiException {
        ApiResponse<CredentialsSaml> resp = userCredentialsSamlWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get Saml Auth Credential
     * ### Saml authentication login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsSaml&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsSaml> userCredentialsSamlWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userCredentialsSamlValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsSaml>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Saml Auth Credential (asynchronously)
     * ### Saml authentication login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userCredentialsSamlAsync(Integer userId, String fields, final ApiCallback<CredentialsSaml> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userCredentialsSamlValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsSaml>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userCredentialsTotp
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userCredentialsTotpCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/credentials_totp"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userCredentialsTotpValidateBeforeCall(Integer userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userCredentialsTotp(Async)");
        }
        
        com.squareup.okhttp.Call call = userCredentialsTotpCall(userId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Two-Factor Credential
     * ### Two-factor login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return CredentialsTotp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CredentialsTotp userCredentialsTotp(Integer userId, String fields) throws ApiException {
        ApiResponse<CredentialsTotp> resp = userCredentialsTotpWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get Two-Factor Credential
     * ### Two-factor login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;CredentialsTotp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CredentialsTotp> userCredentialsTotpWithHttpInfo(Integer userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userCredentialsTotpValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<CredentialsTotp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Two-Factor Credential (asynchronously)
     * ### Two-factor login information for the specified user.
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userCredentialsTotpAsync(Integer userId, String fields, final ApiCallback<CredentialsTotp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userCredentialsTotpValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CredentialsTotp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userForCredential
     * @param credentialType Type name of credential (required)
     * @param credentialId Id of credential (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userForCredentialCall(String credentialType, String credentialId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/credential/{credential_type}/{credential_id}"
            .replaceAll("\\{" + "credential_type" + "\\}", apiClient.escapeString(credentialType.toString()))
            .replaceAll("\\{" + "credential_id" + "\\}", apiClient.escapeString(credentialId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userForCredentialValidateBeforeCall(String credentialType, String credentialId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'credentialType' is set
        if (credentialType == null) {
            throw new ApiException("Missing the required parameter 'credentialType' when calling userForCredential(Async)");
        }
        // verify the required parameter 'credentialId' is set
        if (credentialId == null) {
            throw new ApiException("Missing the required parameter 'credentialId' when calling userForCredential(Async)");
        }
        
        com.squareup.okhttp.Call call = userForCredentialCall(credentialType, credentialId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get User by Credential Id
     * ### Get information about the user with a credential of given type with specific id.  This is used to do things like find users by their embed external_user_id. Or, find the user with a given api3 client_id, etc. The &#x27;credential_type&#x27; matchs the &#x27;type&#x27; name of the various credential types. It must be one of the values listed in the table below. The &#x27;credential_id&#x27; is your unique Id for the user and is specific to each type of credential.  An example using the Ruby sdk might look like:  &#x60;sdk.user_for_credential(&#x27;embed&#x27;, &#x27;customer-4959425&#x27;)&#x60;  This table shows the supported &#x27;Credential Type&#x27; strings. The right column is for reference; it shows which field in the given credential type is actually searched when finding a user with the supplied &#x27;credential_id&#x27;.  | Credential Types | Id Field Matched | | ---------------- | ---------------- | | email            | email            | | google           | google_user_id   | | saml             | saml_user_id     | | oidc             | oidc_user_id     | | ldap             | ldap_id          | | api              | token            | | api3             | client_id        | | embed            | external_user_id | | looker_openid    | email            |  NOTE: &#x27;api&#x27; is the legacy Looker query API. The API you are currently looking at is &#x27;api3&#x27;.  
     * @param credentialType Type name of credential (required)
     * @param credentialId Id of credential (required)
     * @param fields Requested fields. (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User userForCredential(String credentialType, String credentialId, String fields) throws ApiException {
        ApiResponse<User> resp = userForCredentialWithHttpInfo(credentialType, credentialId, fields);
        return resp.getData();
    }

    /**
     * Get User by Credential Id
     * ### Get information about the user with a credential of given type with specific id.  This is used to do things like find users by their embed external_user_id. Or, find the user with a given api3 client_id, etc. The &#x27;credential_type&#x27; matchs the &#x27;type&#x27; name of the various credential types. It must be one of the values listed in the table below. The &#x27;credential_id&#x27; is your unique Id for the user and is specific to each type of credential.  An example using the Ruby sdk might look like:  &#x60;sdk.user_for_credential(&#x27;embed&#x27;, &#x27;customer-4959425&#x27;)&#x60;  This table shows the supported &#x27;Credential Type&#x27; strings. The right column is for reference; it shows which field in the given credential type is actually searched when finding a user with the supplied &#x27;credential_id&#x27;.  | Credential Types | Id Field Matched | | ---------------- | ---------------- | | email            | email            | | google           | google_user_id   | | saml             | saml_user_id     | | oidc             | oidc_user_id     | | ldap             | ldap_id          | | api              | token            | | api3             | client_id        | | embed            | external_user_id | | looker_openid    | email            |  NOTE: &#x27;api&#x27; is the legacy Looker query API. The API you are currently looking at is &#x27;api3&#x27;.  
     * @param credentialType Type name of credential (required)
     * @param credentialId Id of credential (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> userForCredentialWithHttpInfo(String credentialType, String credentialId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userForCredentialValidateBeforeCall(credentialType, credentialId, fields, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get User by Credential Id (asynchronously)
     * ### Get information about the user with a credential of given type with specific id.  This is used to do things like find users by their embed external_user_id. Or, find the user with a given api3 client_id, etc. The &#x27;credential_type&#x27; matchs the &#x27;type&#x27; name of the various credential types. It must be one of the values listed in the table below. The &#x27;credential_id&#x27; is your unique Id for the user and is specific to each type of credential.  An example using the Ruby sdk might look like:  &#x60;sdk.user_for_credential(&#x27;embed&#x27;, &#x27;customer-4959425&#x27;)&#x60;  This table shows the supported &#x27;Credential Type&#x27; strings. The right column is for reference; it shows which field in the given credential type is actually searched when finding a user with the supplied &#x27;credential_id&#x27;.  | Credential Types | Id Field Matched | | ---------------- | ---------------- | | email            | email            | | google           | google_user_id   | | saml             | saml_user_id     | | oidc             | oidc_user_id     | | ldap             | ldap_id          | | api              | token            | | api3             | client_id        | | embed            | external_user_id | | looker_openid    | email            |  NOTE: &#x27;api&#x27; is the legacy Looker query API. The API you are currently looking at is &#x27;api3&#x27;.  
     * @param credentialType Type name of credential (required)
     * @param credentialId Id of credential (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userForCredentialAsync(String credentialType, String credentialId, String fields, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userForCredentialValidateBeforeCall(credentialType, credentialId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userRoles
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param directAssociationOnly Get only roles associated directly with the user: exclude those only associated through groups. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userRolesCall(Integer userId, String fields, Boolean directAssociationOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/roles"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (directAssociationOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direct_association_only", directAssociationOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userRolesValidateBeforeCall(Integer userId, String fields, Boolean directAssociationOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userRoles(Async)");
        }
        
        com.squareup.okhttp.Call call = userRolesCall(userId, fields, directAssociationOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get User Roles
     * ### Get information about roles of the user with a specific id. 
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param directAssociationOnly Get only roles associated directly with the user: exclude those only associated through groups. (optional)
     * @return List&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Role> userRoles(Integer userId, String fields, Boolean directAssociationOnly) throws ApiException {
        ApiResponse<List<Role>> resp = userRolesWithHttpInfo(userId, fields, directAssociationOnly);
        return resp.getData();
    }

    /**
     * Get User Roles
     * ### Get information about roles of the user with a specific id. 
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param directAssociationOnly Get only roles associated directly with the user: exclude those only associated through groups. (optional)
     * @return ApiResponse&lt;List&lt;Role&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Role>> userRolesWithHttpInfo(Integer userId, String fields, Boolean directAssociationOnly) throws ApiException {
        com.squareup.okhttp.Call call = userRolesValidateBeforeCall(userId, fields, directAssociationOnly, null, null);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get User Roles (asynchronously)
     * ### Get information about roles of the user with a specific id. 
     * @param userId id of user (required)
     * @param fields Requested fields. (optional)
     * @param directAssociationOnly Get only roles associated directly with the user: exclude those only associated through groups. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userRolesAsync(Integer userId, String fields, Boolean directAssociationOnly, final ApiCallback<List<Role>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userRolesValidateBeforeCall(userId, fields, directAssociationOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userSession
     * @param userId Id of user (required)
     * @param sessionId Id of Web Login Session (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userSessionCall(Integer userId, Integer sessionId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/sessions/{session_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "session_id" + "\\}", apiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userSessionValidateBeforeCall(Integer userId, Integer sessionId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userSession(Async)");
        }
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling userSession(Async)");
        }
        
        com.squareup.okhttp.Call call = userSessionCall(userId, sessionId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Web Login Session
     * ### Web login session for the specified user.
     * @param userId Id of user (required)
     * @param sessionId Id of Web Login Session (required)
     * @param fields Requested fields. (optional)
     * @return Session
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Session userSession(Integer userId, Integer sessionId, String fields) throws ApiException {
        ApiResponse<Session> resp = userSessionWithHttpInfo(userId, sessionId, fields);
        return resp.getData();
    }

    /**
     * Get Web Login Session
     * ### Web login session for the specified user.
     * @param userId Id of user (required)
     * @param sessionId Id of Web Login Session (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;Session&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Session> userSessionWithHttpInfo(Integer userId, Integer sessionId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = userSessionValidateBeforeCall(userId, sessionId, fields, null, null);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Web Login Session (asynchronously)
     * ### Web login session for the specified user.
     * @param userId Id of user (required)
     * @param sessionId Id of Web Login Session (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userSessionAsync(Integer userId, Integer sessionId, String fields, final ApiCallback<Session> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userSessionValidateBeforeCall(userId, sessionId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Session>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

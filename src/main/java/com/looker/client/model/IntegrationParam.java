/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * IntegrationParam
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-15T12:39:13.185-08:00[America/Los_Angeles]")public class IntegrationParam {

  @SerializedName("name")
  private String name = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("required")
  private Boolean required = null;

  @SerializedName("has_value")
  private Boolean hasValue = null;

  @SerializedName("value")
  private String value = null;

  @SerializedName("user_attribute_name")
  private String userAttributeName = null;

  @SerializedName("sensitive")
  private Boolean sensitive = null;

  @SerializedName("per_user")
  private Boolean perUser = null;
  /**
  * Name of the parameter.
  * @return name
  **/
  @Schema(description = "Name of the parameter.")
  public String getName() {
    return name;
  }
  /**
  * Label of the parameter.
  * @return label
  **/
  @Schema(description = "Label of the parameter.")
  public String getLabel() {
    return label;
  }
  /**
  * Short description of the parameter.
  * @return description
  **/
  @Schema(description = "Short description of the parameter.")
  public String getDescription() {
    return description;
  }
  /**
  * Whether the parameter is required to be set to use the destination. If unspecified, this defaults to false.
  * @return required
  **/
  @Schema(description = "Whether the parameter is required to be set to use the destination. If unspecified, this defaults to false.")
  public Boolean isRequired() {
    return required;
  }
  /**
  * Whether the parameter has a value set.
  * @return hasValue
  **/
  @Schema(description = "Whether the parameter has a value set.")
  public Boolean isHasValue() {
    return hasValue;
  }
  public IntegrationParam value(String value) {
    this.value = value;
    return this;
  }

  

  /**
  * The current value of the parameter. Always null if the value is sensitive. When writing, null values will be ignored. Set the value to an empty string to clear it.
  * @return value
  **/
  @Schema(description = "The current value of the parameter. Always null if the value is sensitive. When writing, null values will be ignored. Set the value to an empty string to clear it.")
  public String getValue() {
    return value;
  }
  public void setValue(String value) {
    this.value = value;
  }
  public IntegrationParam userAttributeName(String userAttributeName) {
    this.userAttributeName = userAttributeName;
    return this;
  }

  

  /**
  * When present, the param&#x27;s value comes from this user attribute instead of the &#x27;value&#x27; parameter. Set to null to use the &#x27;value&#x27;.
  * @return userAttributeName
  **/
  @Schema(description = "When present, the param's value comes from this user attribute instead of the 'value' parameter. Set to null to use the 'value'.")
  public String getUserAttributeName() {
    return userAttributeName;
  }
  public void setUserAttributeName(String userAttributeName) {
    this.userAttributeName = userAttributeName;
  }
  /**
  * Whether the parameter contains sensitive data like API credentials. If unspecified, this defaults to true.
  * @return sensitive
  **/
  @Schema(description = "Whether the parameter contains sensitive data like API credentials. If unspecified, this defaults to true.")
  public Boolean isSensitive() {
    return sensitive;
  }
  /**
  * When true, this parameter must be assigned to a user attribute in the admin panel (instead of a constant value), and that value may be updated by the user as part of the integration flow.
  * @return perUser
  **/
  @Schema(description = "When true, this parameter must be assigned to a user attribute in the admin panel (instead of a constant value), and that value may be updated by the user as part of the integration flow.")
  public Boolean isPerUser() {
    return perUser;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationParam integrationParam = (IntegrationParam) o;
    return Objects.equals(this.name, integrationParam.name) &&
        Objects.equals(this.label, integrationParam.label) &&
        Objects.equals(this.description, integrationParam.description) &&
        Objects.equals(this.required, integrationParam.required) &&
        Objects.equals(this.hasValue, integrationParam.hasValue) &&
        Objects.equals(this.value, integrationParam.value) &&
        Objects.equals(this.userAttributeName, integrationParam.userAttributeName) &&
        Objects.equals(this.sensitive, integrationParam.sensitive) &&
        Objects.equals(this.perUser, integrationParam.perUser);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, label, description, required, hasValue, value, userAttributeName, sensitive, perUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationParam {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    hasValue: ").append(toIndentedString(hasValue)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    userAttributeName: ").append(toIndentedString(userAttributeName)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    perUser: ").append(toIndentedString(perUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.looker.client.model.LookmlModelNavExplore;

import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * LookmlModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-15T12:39:13.185-08:00[America/Los_Angeles]")public class LookmlModel {

  @SerializedName("name")
  private String name = null;

  @SerializedName("project_name")
  private String projectName = null;

  @SerializedName("allowed_db_connection_names")
  private List<String> allowedDbConnectionNames = null;

  @SerializedName("unlimited_db_connections")
  private Boolean unlimitedDbConnections = null;

  @SerializedName("has_content")
  private Boolean hasContent = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("explores")
  private List<LookmlModelNavExplore> explores = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;
  public LookmlModel name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Name of the model. Also used as the unique identifier
  * @return name
  **/
  @Schema(description = "Name of the model. Also used as the unique identifier")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public LookmlModel projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  

  /**
  * Name of project containing the model
  * @return projectName
  **/
  @Schema(description = "Name of project containing the model")
  public String getProjectName() {
    return projectName;
  }
  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }
  public LookmlModel allowedDbConnectionNames(List<String> allowedDbConnectionNames) {
    this.allowedDbConnectionNames = allowedDbConnectionNames;
    return this;
  }

  public LookmlModel addAllowedDbConnectionNamesItem(String allowedDbConnectionNamesItem) {
    if (this.allowedDbConnectionNames == null) {
      this.allowedDbConnectionNames = new ArrayList<String>();
    }
    this.allowedDbConnectionNames.add(allowedDbConnectionNamesItem);
    return this;
  }

  /**
  * Array of names of connections this model is allowed to use
  * @return allowedDbConnectionNames
  **/
  @Schema(description = "Array of names of connections this model is allowed to use")
  public List<String> getAllowedDbConnectionNames() {
    return allowedDbConnectionNames;
  }
  public void setAllowedDbConnectionNames(List<String> allowedDbConnectionNames) {
    this.allowedDbConnectionNames = allowedDbConnectionNames;
  }
  public LookmlModel unlimitedDbConnections(Boolean unlimitedDbConnections) {
    this.unlimitedDbConnections = unlimitedDbConnections;
    return this;
  }

  

  /**
  * Is this model allowed to use all current and future connections
  * @return unlimitedDbConnections
  **/
  @Schema(description = "Is this model allowed to use all current and future connections")
  public Boolean isUnlimitedDbConnections() {
    return unlimitedDbConnections;
  }
  public void setUnlimitedDbConnections(Boolean unlimitedDbConnections) {
    this.unlimitedDbConnections = unlimitedDbConnections;
  }
  /**
  * Does this model declaration have have lookml content?
  * @return hasContent
  **/
  @Schema(description = "Does this model declaration have have lookml content?")
  public Boolean isHasContent() {
    return hasContent;
  }
  /**
  * UI-friendly name for this model
  * @return label
  **/
  @Schema(description = "UI-friendly name for this model")
  public String getLabel() {
    return label;
  }
  /**
  * Array of explores (if has_content)
  * @return explores
  **/
  @Schema(description = "Array of explores (if has_content)")
  public List<LookmlModelNavExplore> getExplores() {
    return explores;
  }
  /**
  * Operations the current user is able to perform on this object
  * @return can
  **/
  @Schema(description = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookmlModel lookmlModel = (LookmlModel) o;
    return Objects.equals(this.name, lookmlModel.name) &&
        Objects.equals(this.projectName, lookmlModel.projectName) &&
        Objects.equals(this.allowedDbConnectionNames, lookmlModel.allowedDbConnectionNames) &&
        Objects.equals(this.unlimitedDbConnections, lookmlModel.unlimitedDbConnections) &&
        Objects.equals(this.hasContent, lookmlModel.hasContent) &&
        Objects.equals(this.label, lookmlModel.label) &&
        Objects.equals(this.explores, lookmlModel.explores) &&
        Objects.equals(this.can, lookmlModel.can);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, projectName, allowedDbConnectionNames, unlimitedDbConnections, hasContent, label, explores, can);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookmlModel {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    allowedDbConnectionNames: ").append(toIndentedString(allowedDbConnectionNames)).append("\n");
    sb.append("    unlimitedDbConnections: ").append(toIndentedString(unlimitedDbConnections)).append("\n");
    sb.append("    hasContent: ").append(toIndentedString(hasContent)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    explores: ").append(toIndentedString(explores)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

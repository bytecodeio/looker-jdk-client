/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * DialectInfoOptions
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-15T12:39:13.185-08:00[America/Los_Angeles]")public class DialectInfoOptions {

  @SerializedName("timezone")
  private Boolean timezone = null;

  @SerializedName("schema")
  private Boolean schema = null;

  @SerializedName("ssl")
  private Boolean ssl = null;

  @SerializedName("auth")
  private Boolean auth = null;

  @SerializedName("host")
  private Boolean host = null;

  @SerializedName("tmp_table")
  private Boolean tmpTable = null;

  @SerializedName("project_name")
  private Boolean projectName = null;

  @SerializedName("oauth_credentials")
  private Boolean oauthCredentials = null;

  @SerializedName("additional_params")
  private Boolean additionalParams = null;

  @SerializedName("username_required")
  private Boolean usernameRequired = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;
  /**
  * Has timezone support
  * @return timezone
  **/
  @Schema(description = "Has timezone support")
  public Boolean isTimezone() {
    return timezone;
  }
  /**
  * Has schema support
  * @return schema
  **/
  @Schema(description = "Has schema support")
  public Boolean isSchema() {
    return schema;
  }
  /**
  * Has SSL support
  * @return ssl
  **/
  @Schema(description = "Has SSL support")
  public Boolean isSsl() {
    return ssl;
  }
  /**
  * Has auth support
  * @return auth
  **/
  @Schema(description = "Has auth support")
  public Boolean isAuth() {
    return auth;
  }
  /**
  * Has host support
  * @return host
  **/
  @Schema(description = "Has host support")
  public Boolean isHost() {
    return host;
  }
  /**
  * Has tmp table support
  * @return tmpTable
  **/
  @Schema(description = "Has tmp table support")
  public Boolean isTmpTable() {
    return tmpTable;
  }
  /**
  * Has project name support
  * @return projectName
  **/
  @Schema(description = "Has project name support")
  public Boolean isProjectName() {
    return projectName;
  }
  /**
  * Has OAuth support
  * @return oauthCredentials
  **/
  @Schema(description = "Has OAuth support")
  public Boolean isOauthCredentials() {
    return oauthCredentials;
  }
  /**
  * Has additional params support
  * @return additionalParams
  **/
  @Schema(description = "Has additional params support")
  public Boolean isAdditionalParams() {
    return additionalParams;
  }
  /**
  * Username is required
  * @return usernameRequired
  **/
  @Schema(description = "Username is required")
  public Boolean isUsernameRequired() {
    return usernameRequired;
  }
  /**
  * Operations the current user is able to perform on this object
  * @return can
  **/
  @Schema(description = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DialectInfoOptions dialectInfoOptions = (DialectInfoOptions) o;
    return Objects.equals(this.timezone, dialectInfoOptions.timezone) &&
        Objects.equals(this.schema, dialectInfoOptions.schema) &&
        Objects.equals(this.ssl, dialectInfoOptions.ssl) &&
        Objects.equals(this.auth, dialectInfoOptions.auth) &&
        Objects.equals(this.host, dialectInfoOptions.host) &&
        Objects.equals(this.tmpTable, dialectInfoOptions.tmpTable) &&
        Objects.equals(this.projectName, dialectInfoOptions.projectName) &&
        Objects.equals(this.oauthCredentials, dialectInfoOptions.oauthCredentials) &&
        Objects.equals(this.additionalParams, dialectInfoOptions.additionalParams) &&
        Objects.equals(this.usernameRequired, dialectInfoOptions.usernameRequired) &&
        Objects.equals(this.can, dialectInfoOptions.can);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(timezone, schema, ssl, auth, host, tmpTable, projectName, oauthCredentials, additionalParams, usernameRequired, can);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DialectInfoOptions {\n");
    
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    tmpTable: ").append(toIndentedString(tmpTable)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    oauthCredentials: ").append(toIndentedString(oauthCredentials)).append("\n");
    sb.append("    additionalParams: ").append(toIndentedString(additionalParams)).append("\n");
    sb.append("    usernameRequired: ").append(toIndentedString(usernameRequired)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

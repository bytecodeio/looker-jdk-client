/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import org.junit.Test;

import com.looker.client.ApiException;
import com.looker.client.api.DashboardApi;
import com.looker.client.model.Dashboard;
import com.looker.client.model.DashboardBase;
import com.looker.client.model.Error;
import com.looker.client.model.Prefetch;
import com.looker.client.model.PrefetchDashboardFilterValue;
import com.looker.client.model.PrefetchDashboardRequest;
import com.looker.client.model.ValidationError;

import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DashboardApi
 */
@Ignore
public class DashboardApiTest {

    private final DashboardApi api = new DashboardApi();

    /**
     * Get All Dashboards
     *
     * ### Get information about all active dashboards.  Returns an array of **abbreviated dashboard objects**. Dashboards marked as deleted are excluded from this list.  Get the **full details** of a specific dashboard by id with [Dashboard](#!/Dashboard/dashboard)  Find **deleted dashboards** with [Search Dashboards](#!/Dashboard/search_dashboards) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allDashboardsTest() throws ApiException {
        String fields = null;
        List<DashboardBase> response = api.allDashboards(fields);

        // TODO: test validations
    }
    /**
     * Create Dashboard
     *
     * ### Create a dashboard with the specified information  Creates a new dashboard object, returning the dashboard details, including the created id.  **Update** an existing dashboard with [Update Dashboard](#!/Dashboard/update_dashboard)  **Permanently delete** an existing dashboard with [Delete Dashboard](#!/Dashboard/delete_dashboard) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDashboardTest() throws ApiException {
        Dashboard body = null;
        Dashboard response = api.createDashboard(body);

        // TODO: test validations
    }
    /**
     * Create Dashboard Prefetch
     *
     * ### Create a prefetch for a dashboard with the specified information.  **Deprecated** Use [DataGroups](#!/Datagroup) to manage cache invalidation of groups of queries. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDashboardPrefetchTest() throws ApiException {
        String dashboardId = null;
        PrefetchDashboardRequest body = null;
        PrefetchDashboardRequest response = api.createDashboardPrefetch(dashboardId, body);

        // TODO: test validations
    }
    /**
     * Get Dashboard
     *
     * ### Get information about the dashboard with the specified id  Returns the full details of the identified dashboard object  Get a **summary list** of all active dashboards with [All Dashboards](#!/Dashboard/all_dashboards)  **Search** for dashboards with [Search Dashboards](#!/Dashboard/search_dashboards) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardTest() throws ApiException {
        String dashboardId = null;
        String fields = null;
        Dashboard response = api.dashboard(dashboardId, fields);

        // TODO: test validations
    }
    /**
     * Get Dashboard Prefetch
     *
     * ### Get a prefetch for a dashboard with the specified information.  **Deprecated** Use [DataGroups](#!/Datagroup) to manage cache invalidation of groups of queries. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardPrefetchTest() throws ApiException {
        String dashboardId = null;
        List<PrefetchDashboardFilterValue> dashboardFilters = null;
        Prefetch response = api.dashboardPrefetch(dashboardId, dashboardFilters);

        // TODO: test validations
    }
    /**
     * Delete Dashboard
     *
     * ### Delete the dashboard with the specified id  Permanently **deletes** a dashboard. (The dashboard cannot be recovered after this operation.)  \&quot;Soft\&quot; delete or hide a dashboard by setting its &#x60;deleted&#x60; status to &#x60;True&#x60; with [Update Dashboard](#!/Dashboard/update_dashboard).  Note: When a dashboard is deleted in the UI, it is soft deleted. Use this API call to permanently remove it, if desired. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDashboardTest() throws ApiException {
        String dashboardId = null;
        String response = api.deleteDashboard(dashboardId);

        // TODO: test validations
    }
    /**
     * Create Dashboard
     *
     * ### Import a LookML dashboard to a space as a UDD Creates a UDD (a dashboard which exists in the Looker database rather than as a LookML file) from the LookML dashboard and puts it in the space specified. The created UDD will have a lookml_link_id which links to the original LookML dashboard.  To give the imported dashboard specify a (e.g. title: \&quot;my title\&quot;) in the body of your request, otherwise the imported dashboard will have the same title as the original LookML dashboard.  For this operation to succeed the user must have permission to see the LookML dashboard in question, and have permission to create content in the space the dashboard is being imported to.  **Sync** a linked UDD with [Sync LookML Dashboard] (#!/Dashboard/sync_lookml_dashboard) **Unlink** a linked UDD by setting lookml_link_id to null with [Update Dashboard](#!/Dashboard/update_dashboard) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importLookmlDashboardTest() throws ApiException {
        String lookmlDashboardId = null;
        String spaceId = null;
        Dashboard body = null;
        Dashboard response = api.importLookmlDashboard(lookmlDashboardId, spaceId, body);

        // TODO: test validations
    }
    /**
     * Search Dashboards
     *
     * ### Search all dashboards for matching criteria.  Returns an **array of dashboard objects** that match the specified search criteria.  The parameters &#x60;limit&#x60;, and &#x60;offset&#x60; are recommended for \&quot;paging\&quot; the returned results.  Get a **single dashboard** by id with [Dashboard](#!/Dashboard/dashboard) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchDashboardsTest() throws ApiException {
        String fields = null;
        Integer id = null;
        String slug = null;
        Integer page = null;
        Integer perPage = null;
        Integer limit = null;
        Integer offset = null;
        String sorts = null;
        String title = null;
        String description = null;
        Integer contentFavoriteId = null;
        String spaceId = null;
        String deleted = null;
        String userId = null;
        String viewCount = null;
        List<Dashboard> response = api.searchDashboards(fields, id, slug, page, perPage, limit, offset, sorts, title, description, contentFavoriteId, spaceId, deleted, userId, viewCount);

        // TODO: test validations
    }
    /**
     * Update Dashboard
     *
     * ### Update all linked dashboards to match the specified LookML dashboard.  Any UDD (a dashboard which exists in the Looker database rather than as a LookML file) which has a lookml_link_id which specifies the LookML dashboard&#x27;s id will be updated so that it matches the current state of the LookML dashboard.  For this operation to succeed the user must have permission to view the LookML dashboard, and only linked dashboards that the user has permission to update will be synced.  To **link** or **unlink** a UDD set the lookml_link_id with [Update Dashboard](#!/Dashboard/update_dashboard) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncLookmlDashboardTest() throws ApiException {
        Dashboard body = null;
        String lookmlDashboardId = null;
        List<Long> response = api.syncLookmlDashboard(body, lookmlDashboardId);

        // TODO: test validations
    }
    /**
     * Update Dashboard
     *
     * ### Update the dashboard with the specified id  Changes simple (scalar) properties of the dashboard. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDashboardTest() throws ApiException {
        Dashboard body = null;
        String dashboardId = null;
        Dashboard response = api.updateDashboard(body, dashboardId);

        // TODO: test validations
    }
}

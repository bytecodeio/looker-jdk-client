/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import org.junit.Test;

import com.looker.client.ApiException;
import com.looker.client.api.ScheduledPlanApi;
import com.looker.client.model.Error;
import com.looker.client.model.ScheduledPlan;
import com.looker.client.model.ValidationError;

import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScheduledPlanApi
 */
@Ignore
public class ScheduledPlanApiTest {

    private final ScheduledPlanApi api = new ScheduledPlanApi();

    /**
     * Get All Scheduled Plans
     *
     * ### Get All Scheduled Plans  Returns all scheduled plans owned by the caller or given user.  If no user_id is provided, this function returns the scheduled plans owned by the caller.   The caller must have &#x60;see_schedules&#x60; permission to see other users&#x27; scheduled plans.   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allScheduledPlansTest() throws ApiException {
        Integer userId = null;
        String fields = null;
        List<ScheduledPlan> response = api.allScheduledPlans(userId, fields);

        // TODO: test validations
    }
    /**
     * Create Scheduled Plan
     *
     * ### Create a Scheduled Plan  Create a scheduled plan to render a Look or Dashboard on a recurring schedule.  The queries that provide the data for the look or dashboard are run in the context of user account that owns the scheduled plan.  Admins can create scheduled plans on behalf of other users by specifying a user id.  Scheduled plan destinations must specify the data format to produce and send to the destination  Scheduled Plan Destination formats:  | format | Description | :-----------: | :--- | | json | A JSON object containing a &#x60;data&#x60; property which contains an array of JSON objects, one per row. No metadata. | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | inline_json | Same as the JSON format, except that the &#x60;data&#x60; property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn&#x27;t have to re-encode the JSON row data in order to pass it on to its ultimate destination. | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | xlsx | MS Excel spreadsheet | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image ||  Valid formats vary by destination type and source object. &#x60;wysiwyg_pdf&#x60; is only valid for dashboards, for example.   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createScheduledPlanTest() throws ApiException {
        ScheduledPlan body = null;
        ScheduledPlan response = api.createScheduledPlan(body);

        // TODO: test validations
    }
    /**
     * Delete Scheduled Plan
     *
     * ### Delete a Scheduled Plan  Normal users can only delete their own scheduled plans. Admins can delete other users&#x27; scheduled plans. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteScheduledPlanTest() throws ApiException {
        Integer scheduledPlanId = null;
        String response = api.deleteScheduledPlan(scheduledPlanId);

        // TODO: test validations
    }
    /**
     * Get Scheduled Plan
     *
     * ### Get Information About a Scheduled Plan  Admins can fetch information about other users&#x27; Scheduled Plans. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduledPlanTest() throws ApiException {
        Integer scheduledPlanId = null;
        String fields = null;
        ScheduledPlan response = api.scheduledPlan(scheduledPlanId, fields);

        // TODO: test validations
    }
    /**
     * Run Scheduled Plan Once
     *
     * ### Run a Scheduled Plan Immediately  Create a scheduled plan that runs only once, and immediately.  This can be useful for testing a Scheduled Plan before committing to a production schedule.  Admins can create scheduled plans on behalf of other users by specifying a user id.  Scheduled plan destinations must specify the data format to produce and send to the destination  Scheduled Plan Destination formats:  | format | Description | :-----------: | :--- | | json | A JSON object containing a &#x60;data&#x60; property which contains an array of JSON objects, one per row. No metadata. | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | inline_json | Same as the JSON format, except that the &#x60;data&#x60; property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn&#x27;t have to re-encode the JSON row data in order to pass it on to its ultimate destination. | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | xlsx | MS Excel spreadsheet | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image ||  Valid formats vary by destination type and source object. &#x60;wysiwyg_pdf&#x60; is only valid for dashboards, for example.   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduledPlanRunOnceTest() throws ApiException {
        ScheduledPlan body = null;
        ScheduledPlan response = api.scheduledPlanRunOnce(body);

        // TODO: test validations
    }
    /**
     * Scheduled Plans for Dashboard
     *
     * ### Get Scheduled Plans for a Dashboard  Returns all scheduled plans owned by the caller or given user, for a given dashboard.  If no user_id is provided, this function returns the scheduled plans owned by the caller.   The caller must have &#x60;see_schedules&#x60; permission to see other users&#x27; scheduled plans.   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduledPlansForDashboardTest() throws ApiException {
        Integer dashboardId = null;
        Integer userId = null;
        String fields = null;
        List<ScheduledPlan> response = api.scheduledPlansForDashboard(dashboardId, userId, fields);

        // TODO: test validations
    }
    /**
     * Scheduled Plans for Look
     *
     * ### Get Scheduled Plans for a Look  Returns all scheduled plans owned by the caller or given user, for a given look.  If no user_id is provided, this function returns the scheduled plans owned by the caller.   The caller must have &#x60;see_schedules&#x60; permission to see other users&#x27; scheduled plans.   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduledPlansForLookTest() throws ApiException {
        Integer lookId = null;
        Integer userId = null;
        String fields = null;
        List<ScheduledPlan> response = api.scheduledPlansForLook(lookId, userId, fields);

        // TODO: test validations
    }
    /**
     * Scheduled Plans for LookML Dashboard
     *
     * ### Get Scheduled Plans for a LookML Dashboard  Returns all scheduled plans owned by the caller or given user, for a given LookML dashboard.  If no user_id is provided, this function returns the scheduled plans owned by the caller.   The caller must have &#x60;see_schedules&#x60; permission to see other users&#x27; scheduled plans.   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduledPlansForLookmlDashboardTest() throws ApiException {
        Integer lookmlDashboardId = null;
        Integer userId = null;
        String fields = null;
        List<ScheduledPlan> response = api.scheduledPlansForLookmlDashboard(lookmlDashboardId, userId, fields);

        // TODO: test validations
    }
    /**
     * Scheduled Plans for Space
     *
     * ### Get Scheduled Plans for a Space  Returns scheduled plans owned by the caller for a given space id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scheduledPlansForSpaceTest() throws ApiException {
        Integer spaceId = null;
        String fields = null;
        List<ScheduledPlan> response = api.scheduledPlansForSpace(spaceId, fields);

        // TODO: test validations
    }
    /**
     * Update Scheduled Plan
     *
     * ### Update a Scheduled Plan  Admins can update other users&#x27; Scheduled Plans.  Note: Any scheduled plan destinations specified in an update will **replace** all scheduled plan destinations currently defined for the scheduled plan.  For Example: If a scheduled plan has destinations A, B, and C, and you call update on this scheduled plan specifying only B in the destinations, then destinations A and C will be deleted by the update.  Scheduled plan destinations must specify the data format to produce and send to the destination  Scheduled Plan Destination formats:  | format | Description | :-----------: | :--- | | json | A JSON object containing a &#x60;data&#x60; property which contains an array of JSON objects, one per row. No metadata. | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | inline_json | Same as the JSON format, except that the &#x60;data&#x60; property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn&#x27;t have to re-encode the JSON row data in order to pass it on to its ultimate destination. | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | xlsx | MS Excel spreadsheet | wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document | assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document | wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image ||  Valid formats vary by destination type and source object. &#x60;wysiwyg_pdf&#x60; is only valid for dashboards, for example.   
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateScheduledPlanTest() throws ApiException {
        ScheduledPlan body = null;
        Integer scheduledPlanId = null;
        ScheduledPlan response = api.updateScheduledPlan(body, scheduledPlanId);

        // TODO: test validations
    }
}

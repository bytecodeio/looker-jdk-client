/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.looker.client.model.AccessFilter;
import com.looker.client.model.CredentialsApi;
import com.looker.client.model.CredentialsApi3;
import com.looker.client.model.CredentialsEmail;
import com.looker.client.model.CredentialsEmbed;
import com.looker.client.model.CredentialsGoogle;
import com.looker.client.model.CredentialsLDAP;
import com.looker.client.model.CredentialsLookerOpenid;
import com.looker.client.model.CredentialsOIDC;
import com.looker.client.model.CredentialsSaml;
import com.looker.client.model.CredentialsTotp;
import com.looker.client.model.Session;

import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * User
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-15T12:39:13.185-08:00[America/Los_Angeles]")public class User {

  @SerializedName("id")
  private Long id = null;

  @SerializedName("first_name")
  private String firstName = null;

  @SerializedName("last_name")
  private String lastName = null;

  @SerializedName("display_name")
  private String displayName = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("is_disabled")
  private Boolean isDisabled = null;

  @SerializedName("avatar_url")
  private String avatarUrl = null;

  @SerializedName("home_space_id")
  private String homeSpaceId = null;

  @SerializedName("personal_space_id")
  private Long personalSpaceId = null;

  @SerializedName("embed_group_space_id")
  private Long embedGroupSpaceId = null;

  @SerializedName("access_filters")
  private List<AccessFilter> accessFilters = null;

  @SerializedName("credentials_email")
  private CredentialsEmail credentialsEmail = null;

  @SerializedName("credentials_totp")
  private CredentialsTotp credentialsTotp = null;

  @SerializedName("credentials_ldap")
  private CredentialsLDAP credentialsLdap = null;

  @SerializedName("credentials_google")
  private CredentialsGoogle credentialsGoogle = null;

  @SerializedName("credentials_saml")
  private CredentialsSaml credentialsSaml = null;

  @SerializedName("credentials_oidc")
  private CredentialsOIDC credentialsOidc = null;

  @SerializedName("credentials_api")
  private CredentialsApi credentialsApi = null;

  @SerializedName("credentials_api3")
  private List<CredentialsApi3> credentialsApi3 = null;

  @SerializedName("credentials_embed")
  private List<CredentialsEmbed> credentialsEmbed = null;

  @SerializedName("credentials_looker_openid")
  private CredentialsLookerOpenid credentialsLookerOpenid = null;

  @SerializedName("sessions")
  private List<Session> sessions = null;

  @SerializedName("role_ids")
  private List<Long> roleIds = null;

  @SerializedName("group_ids")
  private List<Long> groupIds = null;

  @SerializedName("presumed_looker_employee")
  private Boolean presumedLookerEmployee = null;

  @SerializedName("verified_looker_employee")
  private Boolean verifiedLookerEmployee = null;

  @SerializedName("looker_versions")
  private List<String> lookerVersions = null;

  @SerializedName("ui_state")
  private Map<String, String> uiState = null;

  @SerializedName("locale")
  private String locale = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;
  /**
  * Unique Id
  * @return id
  **/
  @Schema(description = "Unique Id")
  public Long getId() {
    return id;
  }
  public User firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  

  /**
  * First name
  * @return firstName
  **/
  @Schema(description = "First name")
  public String getFirstName() {
    return firstName;
  }
  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }
  public User lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  

  /**
  * Last name
  * @return lastName
  **/
  @Schema(description = "Last name")
  public String getLastName() {
    return lastName;
  }
  public void setLastName(String lastName) {
    this.lastName = lastName;
  }
  /**
  * Full name for display (available only if both first_name and last_name are set)
  * @return displayName
  **/
  @Schema(description = "Full name for display (available only if both first_name and last_name are set)")
  public String getDisplayName() {
    return displayName;
  }
  /**
  * EMail address
  * @return email
  **/
  @Schema(description = "EMail address")
  public String getEmail() {
    return email;
  }
  public User isDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
    return this;
  }

  

  /**
  * Account has been disabled
  * @return isDisabled
  **/
  @Schema(description = "Account has been disabled")
  public Boolean isIsDisabled() {
    return isDisabled;
  }
  public void setIsDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
  }
  /**
  * URL for the avatar image (may be generic)
  * @return avatarUrl
  **/
  @Schema(description = "URL for the avatar image (may be generic)")
  public String getAvatarUrl() {
    return avatarUrl;
  }
  public User homeSpaceId(String homeSpaceId) {
    this.homeSpaceId = homeSpaceId;
    return this;
  }

  

  /**
  * ID string for user&#x27;s home space
  * @return homeSpaceId
  **/
  @Schema(description = "ID string for user's home space")
  public String getHomeSpaceId() {
    return homeSpaceId;
  }
  public void setHomeSpaceId(String homeSpaceId) {
    this.homeSpaceId = homeSpaceId;
  }
  /**
  * ID of user&#x27;s personal space
  * @return personalSpaceId
  **/
  @Schema(description = "ID of user's personal space")
  public Long getPersonalSpaceId() {
    return personalSpaceId;
  }
  /**
  * (Embed only) ID of user&#x27;s group space based on the external_group_id optionally specified during embed user login
  * @return embedGroupSpaceId
  **/
  @Schema(description = "(Embed only) ID of user's group space based on the external_group_id optionally specified during embed user login")
  public Long getEmbedGroupSpaceId() {
    return embedGroupSpaceId;
  }
  /**
  * Model access filters.
  * @return accessFilters
  **/
  @Schema(description = "Model access filters.")
  public List<AccessFilter> getAccessFilters() {
    return accessFilters;
  }
  public User credentialsEmail(CredentialsEmail credentialsEmail) {
    this.credentialsEmail = credentialsEmail;
    return this;
  }

  

  /**
  * Get credentialsEmail
  * @return credentialsEmail
  **/
  @Schema(description = "")
  public CredentialsEmail getCredentialsEmail() {
    return credentialsEmail;
  }
  public void setCredentialsEmail(CredentialsEmail credentialsEmail) {
    this.credentialsEmail = credentialsEmail;
  }
  public User credentialsTotp(CredentialsTotp credentialsTotp) {
    this.credentialsTotp = credentialsTotp;
    return this;
  }

  

  /**
  * Get credentialsTotp
  * @return credentialsTotp
  **/
  @Schema(description = "")
  public CredentialsTotp getCredentialsTotp() {
    return credentialsTotp;
  }
  public void setCredentialsTotp(CredentialsTotp credentialsTotp) {
    this.credentialsTotp = credentialsTotp;
  }
  public User credentialsLdap(CredentialsLDAP credentialsLdap) {
    this.credentialsLdap = credentialsLdap;
    return this;
  }

  

  /**
  * Get credentialsLdap
  * @return credentialsLdap
  **/
  @Schema(description = "")
  public CredentialsLDAP getCredentialsLdap() {
    return credentialsLdap;
  }
  public void setCredentialsLdap(CredentialsLDAP credentialsLdap) {
    this.credentialsLdap = credentialsLdap;
  }
  public User credentialsGoogle(CredentialsGoogle credentialsGoogle) {
    this.credentialsGoogle = credentialsGoogle;
    return this;
  }

  

  /**
  * Get credentialsGoogle
  * @return credentialsGoogle
  **/
  @Schema(description = "")
  public CredentialsGoogle getCredentialsGoogle() {
    return credentialsGoogle;
  }
  public void setCredentialsGoogle(CredentialsGoogle credentialsGoogle) {
    this.credentialsGoogle = credentialsGoogle;
  }
  public User credentialsSaml(CredentialsSaml credentialsSaml) {
    this.credentialsSaml = credentialsSaml;
    return this;
  }

  

  /**
  * Get credentialsSaml
  * @return credentialsSaml
  **/
  @Schema(description = "")
  public CredentialsSaml getCredentialsSaml() {
    return credentialsSaml;
  }
  public void setCredentialsSaml(CredentialsSaml credentialsSaml) {
    this.credentialsSaml = credentialsSaml;
  }
  public User credentialsOidc(CredentialsOIDC credentialsOidc) {
    this.credentialsOidc = credentialsOidc;
    return this;
  }

  

  /**
  * Get credentialsOidc
  * @return credentialsOidc
  **/
  @Schema(description = "")
  public CredentialsOIDC getCredentialsOidc() {
    return credentialsOidc;
  }
  public void setCredentialsOidc(CredentialsOIDC credentialsOidc) {
    this.credentialsOidc = credentialsOidc;
  }
  public User credentialsApi(CredentialsApi credentialsApi) {
    this.credentialsApi = credentialsApi;
    return this;
  }

  

  /**
  * Get credentialsApi
  * @return credentialsApi
  **/
  @Schema(description = "")
  public CredentialsApi getCredentialsApi() {
    return credentialsApi;
  }
  public void setCredentialsApi(CredentialsApi credentialsApi) {
    this.credentialsApi = credentialsApi;
  }
  /**
  * API 3 credentials
  * @return credentialsApi3
  **/
  @Schema(description = "API 3 credentials")
  public List<CredentialsApi3> getCredentialsApi3() {
    return credentialsApi3;
  }
  /**
  * Embed credentials
  * @return credentialsEmbed
  **/
  @Schema(description = "Embed credentials")
  public List<CredentialsEmbed> getCredentialsEmbed() {
    return credentialsEmbed;
  }
  public User credentialsLookerOpenid(CredentialsLookerOpenid credentialsLookerOpenid) {
    this.credentialsLookerOpenid = credentialsLookerOpenid;
    return this;
  }

  

  /**
  * Get credentialsLookerOpenid
  * @return credentialsLookerOpenid
  **/
  @Schema(description = "")
  public CredentialsLookerOpenid getCredentialsLookerOpenid() {
    return credentialsLookerOpenid;
  }
  public void setCredentialsLookerOpenid(CredentialsLookerOpenid credentialsLookerOpenid) {
    this.credentialsLookerOpenid = credentialsLookerOpenid;
  }
  /**
  * Active sessions
  * @return sessions
  **/
  @Schema(description = "Active sessions")
  public List<Session> getSessions() {
    return sessions;
  }
  /**
  * Array of ids of the roles for this user
  * @return roleIds
  **/
  @Schema(description = "Array of ids of the roles for this user")
  public List<Long> getRoleIds() {
    return roleIds;
  }
  /**
  * Array of ids of the groups for this user
  * @return groupIds
  **/
  @Schema(description = "Array of ids of the groups for this user")
  public List<Long> getGroupIds() {
    return groupIds;
  }
  /**
  * User is identified as an employee of Looker
  * @return presumedLookerEmployee
  **/
  @Schema(description = "User is identified as an employee of Looker")
  public Boolean isPresumedLookerEmployee() {
    return presumedLookerEmployee;
  }
  /**
  * User is identified as an employee of Looker who has been verified via Looker corporate authentication
  * @return verifiedLookerEmployee
  **/
  @Schema(description = "User is identified as an employee of Looker who has been verified via Looker corporate authentication")
  public Boolean isVerifiedLookerEmployee() {
    return verifiedLookerEmployee;
  }
  /**
  * Array of strings representing the Looker versions that this user has used (this only goes back as far as &#x27;3.54.0&#x27;)
  * @return lookerVersions
  **/
  @Schema(description = "Array of strings representing the Looker versions that this user has used (this only goes back as far as '3.54.0')")
  public List<String> getLookerVersions() {
    return lookerVersions;
  }
  public User uiState(Map<String, String> uiState) {
    this.uiState = uiState;
    return this;
  }

  
  public User putUiStateItem(String key, String uiStateItem) {
    if (this.uiState == null) {
      this.uiState = new HashMap<String, String>();
    }
    this.uiState.put(key, uiStateItem);
    return this;
  }
  /**
  * Per user dictionary of undocumented state information owned by the Looker UI.
  * @return uiState
  **/
  @Schema(description = "Per user dictionary of undocumented state information owned by the Looker UI.")
  public Map<String, String> getUiState() {
    return uiState;
  }
  public void setUiState(Map<String, String> uiState) {
    this.uiState = uiState;
  }
  public User locale(String locale) {
    this.locale = locale;
    return this;
  }

  

  /**
  * User&#x27;s preferred locale. User locale takes precedence over Looker&#x27;s system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: &#x27;en&#x27; or &#x27;en-US&#x27;, for example.
  * @return locale
  **/
  @Schema(description = "User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example.")
  public String getLocale() {
    return locale;
  }
  public void setLocale(String locale) {
    this.locale = locale;
  }
  /**
  * Link to get this item
  * @return url
  **/
  @Schema(description = "Link to get this item")
  public String getUrl() {
    return url;
  }
  /**
  * Operations the current user is able to perform on this object
  * @return can
  **/
  @Schema(description = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.firstName, user.firstName) &&
        Objects.equals(this.lastName, user.lastName) &&
        Objects.equals(this.displayName, user.displayName) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.isDisabled, user.isDisabled) &&
        Objects.equals(this.avatarUrl, user.avatarUrl) &&
        Objects.equals(this.homeSpaceId, user.homeSpaceId) &&
        Objects.equals(this.personalSpaceId, user.personalSpaceId) &&
        Objects.equals(this.embedGroupSpaceId, user.embedGroupSpaceId) &&
        Objects.equals(this.accessFilters, user.accessFilters) &&
        Objects.equals(this.credentialsEmail, user.credentialsEmail) &&
        Objects.equals(this.credentialsTotp, user.credentialsTotp) &&
        Objects.equals(this.credentialsLdap, user.credentialsLdap) &&
        Objects.equals(this.credentialsGoogle, user.credentialsGoogle) &&
        Objects.equals(this.credentialsSaml, user.credentialsSaml) &&
        Objects.equals(this.credentialsOidc, user.credentialsOidc) &&
        Objects.equals(this.credentialsApi, user.credentialsApi) &&
        Objects.equals(this.credentialsApi3, user.credentialsApi3) &&
        Objects.equals(this.credentialsEmbed, user.credentialsEmbed) &&
        Objects.equals(this.credentialsLookerOpenid, user.credentialsLookerOpenid) &&
        Objects.equals(this.sessions, user.sessions) &&
        Objects.equals(this.roleIds, user.roleIds) &&
        Objects.equals(this.groupIds, user.groupIds) &&
        Objects.equals(this.presumedLookerEmployee, user.presumedLookerEmployee) &&
        Objects.equals(this.verifiedLookerEmployee, user.verifiedLookerEmployee) &&
        Objects.equals(this.lookerVersions, user.lookerVersions) &&
        Objects.equals(this.uiState, user.uiState) &&
        Objects.equals(this.locale, user.locale) &&
        Objects.equals(this.url, user.url) &&
        Objects.equals(this.can, user.can);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, firstName, lastName, displayName, email, isDisabled, avatarUrl, homeSpaceId, personalSpaceId, embedGroupSpaceId, accessFilters, credentialsEmail, credentialsTotp, credentialsLdap, credentialsGoogle, credentialsSaml, credentialsOidc, credentialsApi, credentialsApi3, credentialsEmbed, credentialsLookerOpenid, sessions, roleIds, groupIds, presumedLookerEmployee, verifiedLookerEmployee, lookerVersions, uiState, locale, url, can);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    isDisabled: ").append(toIndentedString(isDisabled)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    homeSpaceId: ").append(toIndentedString(homeSpaceId)).append("\n");
    sb.append("    personalSpaceId: ").append(toIndentedString(personalSpaceId)).append("\n");
    sb.append("    embedGroupSpaceId: ").append(toIndentedString(embedGroupSpaceId)).append("\n");
    sb.append("    accessFilters: ").append(toIndentedString(accessFilters)).append("\n");
    sb.append("    credentialsEmail: ").append(toIndentedString(credentialsEmail)).append("\n");
    sb.append("    credentialsTotp: ").append(toIndentedString(credentialsTotp)).append("\n");
    sb.append("    credentialsLdap: ").append(toIndentedString(credentialsLdap)).append("\n");
    sb.append("    credentialsGoogle: ").append(toIndentedString(credentialsGoogle)).append("\n");
    sb.append("    credentialsSaml: ").append(toIndentedString(credentialsSaml)).append("\n");
    sb.append("    credentialsOidc: ").append(toIndentedString(credentialsOidc)).append("\n");
    sb.append("    credentialsApi: ").append(toIndentedString(credentialsApi)).append("\n");
    sb.append("    credentialsApi3: ").append(toIndentedString(credentialsApi3)).append("\n");
    sb.append("    credentialsEmbed: ").append(toIndentedString(credentialsEmbed)).append("\n");
    sb.append("    credentialsLookerOpenid: ").append(toIndentedString(credentialsLookerOpenid)).append("\n");
    sb.append("    sessions: ").append(toIndentedString(sessions)).append("\n");
    sb.append("    roleIds: ").append(toIndentedString(roleIds)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    presumedLookerEmployee: ").append(toIndentedString(presumedLookerEmployee)).append("\n");
    sb.append("    verifiedLookerEmployee: ").append(toIndentedString(verifiedLookerEmployee)).append("\n");
    sb.append("    lookerVersions: ").append(toIndentedString(lookerVersions)).append("\n");
    sb.append("    uiState: ").append(toIndentedString(uiState)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

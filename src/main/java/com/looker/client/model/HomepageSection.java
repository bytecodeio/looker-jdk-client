/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.looker.client.model.HomepageItem;

import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

/**
 * HomepageSection
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-15T12:39:13.185-08:00[America/Los_Angeles]")public class HomepageSection {

  @SerializedName("id")
  private String id = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("is_header")
  private Boolean isHeader = null;

  @SerializedName("order")
  private Float order = null;

  @SerializedName("detail_url")
  private String detailUrl = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  @SerializedName("deleted_at")
  private OffsetDateTime deletedAt = null;

  @SerializedName("homepage_id")
  private Long homepageId = null;

  @SerializedName("homepage_items")
  private List<HomepageItem> homepageItems = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;
  /**
  * Unique Id
  * @return id
  **/
  @Schema(description = "Unique Id")
  public String getId() {
    return id;
  }
  public HomepageSection title(String title) {
    this.title = title;
    return this;
  }

  

  /**
  * Name of row
  * @return title
  **/
  @Schema(description = "Name of row")
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }
  /**
  * Is this a header section (has no items)
  * @return isHeader
  **/
  @Schema(description = "Is this a header section (has no items)")
  public Boolean isIsHeader() {
    return isHeader;
  }
  public HomepageSection order(Float order) {
    this.order = order;
    return this;
  }

  

  /**
  * An arbitrary float representing the sort order of sections.
  * @return order
  **/
  @Schema(description = "An arbitrary float representing the sort order of sections.")
  public Float getOrder() {
    return order;
  }
  public void setOrder(Float order) {
    this.order = order;
  }
  /**
  * A URL pointing to a page showing further information about the content in the section.
  * @return detailUrl
  **/
  @Schema(description = "A URL pointing to a page showing further information about the content in the section.")
  public String getDetailUrl() {
    return detailUrl;
  }
  /**
  * Time at which this section was created.
  * @return createdAt
  **/
  @Schema(description = "Time at which this section was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }
  /**
  * Time at which this section was last updated.
  * @return updatedAt
  **/
  @Schema(description = "Time at which this section was last updated.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }
  public HomepageSection deletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  

  /**
  * Time at which this section was deleted.
  * @return deletedAt
  **/
  @Schema(description = "Time at which this section was deleted.")
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }
  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }
  /**
  * Id reference to parent homepage
  * @return homepageId
  **/
  @Schema(description = "Id reference to parent homepage")
  public Long getHomepageId() {
    return homepageId;
  }
  /**
  * Items in the homepage section
  * @return homepageItems
  **/
  @Schema(description = "Items in the homepage section")
  public List<HomepageItem> getHomepageItems() {
    return homepageItems;
  }
  /**
  * Operations the current user is able to perform on this object
  * @return can
  **/
  @Schema(description = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HomepageSection homepageSection = (HomepageSection) o;
    return Objects.equals(this.id, homepageSection.id) &&
        Objects.equals(this.title, homepageSection.title) &&
        Objects.equals(this.isHeader, homepageSection.isHeader) &&
        Objects.equals(this.order, homepageSection.order) &&
        Objects.equals(this.detailUrl, homepageSection.detailUrl) &&
        Objects.equals(this.createdAt, homepageSection.createdAt) &&
        Objects.equals(this.updatedAt, homepageSection.updatedAt) &&
        Objects.equals(this.deletedAt, homepageSection.deletedAt) &&
        Objects.equals(this.homepageId, homepageSection.homepageId) &&
        Objects.equals(this.homepageItems, homepageSection.homepageItems) &&
        Objects.equals(this.can, homepageSection.can);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, title, isHeader, order, detailUrl, createdAt, updatedAt, deletedAt, homepageId, homepageItems, can);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HomepageSection {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    isHeader: ").append(toIndentedString(isHeader)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    detailUrl: ").append(toIndentedString(detailUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    homepageId: ").append(toIndentedString(homepageId)).append("\n");
    sb.append("    homepageItems: ").append(toIndentedString(homepageItems)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

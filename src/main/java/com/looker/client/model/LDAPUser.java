/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * LDAPUser
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-15T12:39:13.185-08:00[America/Los_Angeles]")public class LDAPUser {

  @SerializedName("email")
  private String email = null;

  @SerializedName("first_name")
  private String firstName = null;

  @SerializedName("last_name")
  private String lastName = null;

  @SerializedName("ldap_id")
  private String ldapId = null;

  @SerializedName("all_emails")
  private List<String> allEmails = null;

  @SerializedName("ldap_dn")
  private String ldapDn = null;

  @SerializedName("roles")
  private List<String> roles = null;

  @SerializedName("groups")
  private List<String> groups = null;

  @SerializedName("attributes")
  private Map<String, String> attributes = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;
  /**
  * Primary email address
  * @return email
  **/
  @Schema(description = "Primary email address")
  public String getEmail() {
    return email;
  }
  /**
  * First name
  * @return firstName
  **/
  @Schema(description = "First name")
  public String getFirstName() {
    return firstName;
  }
  /**
  * Last Name
  * @return lastName
  **/
  @Schema(description = "Last Name")
  public String getLastName() {
    return lastName;
  }
  /**
  * LDAP&#x27;s Unique ID for the user
  * @return ldapId
  **/
  @Schema(description = "LDAP's Unique ID for the user")
  public String getLdapId() {
    return ldapId;
  }
  /**
  * Array of user&#x27;s email addresses and aliases for use in migration
  * @return allEmails
  **/
  @Schema(description = "Array of user's email addresses and aliases for use in migration")
  public List<String> getAllEmails() {
    return allEmails;
  }
  /**
  * LDAP&#x27;s distinguished name for the user record
  * @return ldapDn
  **/
  @Schema(description = "LDAP's distinguished name for the user record")
  public String getLdapDn() {
    return ldapDn;
  }
  /**
  * Array of user&#x27;s roles (role names only)
  * @return roles
  **/
  @Schema(description = "Array of user's roles (role names only)")
  public List<String> getRoles() {
    return roles;
  }
  /**
  * Array of user&#x27;s groups (group names only)
  * @return groups
  **/
  @Schema(description = "Array of user's groups (group names only)")
  public List<String> getGroups() {
    return groups;
  }
  /**
  * Dictionary of user&#x27;s attrributes (name/value)
  * @return attributes
  **/
  @Schema(description = "Dictionary of user's attrributes (name/value)")
  public Map<String, String> getAttributes() {
    return attributes;
  }
  /**
  * Link to ldap config
  * @return url
  **/
  @Schema(description = "Link to ldap config")
  public String getUrl() {
    return url;
  }
  /**
  * Operations the current user is able to perform on this object
  * @return can
  **/
  @Schema(description = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LDAPUser ldAPUser = (LDAPUser) o;
    return Objects.equals(this.email, ldAPUser.email) &&
        Objects.equals(this.firstName, ldAPUser.firstName) &&
        Objects.equals(this.lastName, ldAPUser.lastName) &&
        Objects.equals(this.ldapId, ldAPUser.ldapId) &&
        Objects.equals(this.allEmails, ldAPUser.allEmails) &&
        Objects.equals(this.ldapDn, ldAPUser.ldapDn) &&
        Objects.equals(this.roles, ldAPUser.roles) &&
        Objects.equals(this.groups, ldAPUser.groups) &&
        Objects.equals(this.attributes, ldAPUser.attributes) &&
        Objects.equals(this.url, ldAPUser.url) &&
        Objects.equals(this.can, ldAPUser.can);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(email, firstName, lastName, ldapId, allEmails, ldapDn, roles, groups, attributes, url, can);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LDAPUser {\n");
    
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    ldapId: ").append(toIndentedString(ldapId)).append("\n");
    sb.append("    allEmails: ").append(toIndentedString(allEmails)).append("\n");
    sb.append("    ldapDn: ").append(toIndentedString(ldapDn)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

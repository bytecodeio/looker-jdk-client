/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.looker.client.model.DBConnectionBase;
import com.looker.client.model.UserPublic;

import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * SqlQuery
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-15T12:39:13.185-08:00[America/Los_Angeles]")public class SqlQuery {

  @SerializedName("slug")
  private String slug = null;

  @SerializedName("last_runtime")
  private Float lastRuntime = null;

  @SerializedName("run_count")
  private Long runCount = null;

  @SerializedName("browser_limit")
  private Long browserLimit = null;

  @SerializedName("sql")
  private String sql = null;

  @SerializedName("last_run_at")
  private String lastRunAt = null;

  @SerializedName("connection")
  private DBConnectionBase connection = null;

  @SerializedName("model_name")
  private String modelName = null;

  @SerializedName("creator")
  private UserPublic creator = null;

  @SerializedName("explore_url")
  private String exploreUrl = null;

  @SerializedName("plaintext")
  private Boolean plaintext = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;
  /**
  * The identifier of the SQL query
  * @return slug
  **/
  @Schema(description = "The identifier of the SQL query")
  public String getSlug() {
    return slug;
  }
  /**
  * Number of seconds this query took to run the most recent time it was run
  * @return lastRuntime
  **/
  @Schema(description = "Number of seconds this query took to run the most recent time it was run")
  public Float getLastRuntime() {
    return lastRuntime;
  }
  /**
  * Number of times this query has been run
  * @return runCount
  **/
  @Schema(description = "Number of times this query has been run")
  public Long getRunCount() {
    return runCount;
  }
  /**
  * Maximum number of rows this query will display on the SQL Runner page
  * @return browserLimit
  **/
  @Schema(description = "Maximum number of rows this query will display on the SQL Runner page")
  public Long getBrowserLimit() {
    return browserLimit;
  }
  /**
  * SQL query text
  * @return sql
  **/
  @Schema(description = "SQL query text")
  public String getSql() {
    return sql;
  }
  /**
  * The most recent time this query was run
  * @return lastRunAt
  **/
  @Schema(description = "The most recent time this query was run")
  public String getLastRunAt() {
    return lastRunAt;
  }
  public SqlQuery connection(DBConnectionBase connection) {
    this.connection = connection;
    return this;
  }

  

  /**
  * Get connection
  * @return connection
  **/
  @Schema(description = "")
  public DBConnectionBase getConnection() {
    return connection;
  }
  public void setConnection(DBConnectionBase connection) {
    this.connection = connection;
  }
  /**
  * Model name this query uses
  * @return modelName
  **/
  @Schema(description = "Model name this query uses")
  public String getModelName() {
    return modelName;
  }
  public SqlQuery creator(UserPublic creator) {
    this.creator = creator;
    return this;
  }

  

  /**
  * Get creator
  * @return creator
  **/
  @Schema(description = "")
  public UserPublic getCreator() {
    return creator;
  }
  public void setCreator(UserPublic creator) {
    this.creator = creator;
  }
  /**
  * Explore page URL for this SQL query
  * @return exploreUrl
  **/
  @Schema(description = "Explore page URL for this SQL query")
  public String getExploreUrl() {
    return exploreUrl;
  }
  /**
  * Should this query be rendered as plain text
  * @return plaintext
  **/
  @Schema(description = "Should this query be rendered as plain text")
  public Boolean isPlaintext() {
    return plaintext;
  }
  /**
  * Operations the current user is able to perform on this object
  * @return can
  **/
  @Schema(description = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SqlQuery sqlQuery = (SqlQuery) o;
    return Objects.equals(this.slug, sqlQuery.slug) &&
        Objects.equals(this.lastRuntime, sqlQuery.lastRuntime) &&
        Objects.equals(this.runCount, sqlQuery.runCount) &&
        Objects.equals(this.browserLimit, sqlQuery.browserLimit) &&
        Objects.equals(this.sql, sqlQuery.sql) &&
        Objects.equals(this.lastRunAt, sqlQuery.lastRunAt) &&
        Objects.equals(this.connection, sqlQuery.connection) &&
        Objects.equals(this.modelName, sqlQuery.modelName) &&
        Objects.equals(this.creator, sqlQuery.creator) &&
        Objects.equals(this.exploreUrl, sqlQuery.exploreUrl) &&
        Objects.equals(this.plaintext, sqlQuery.plaintext) &&
        Objects.equals(this.can, sqlQuery.can);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(slug, lastRuntime, runCount, browserLimit, sql, lastRunAt, connection, modelName, creator, exploreUrl, plaintext, can);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SqlQuery {\n");
    
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    lastRuntime: ").append(toIndentedString(lastRuntime)).append("\n");
    sb.append("    runCount: ").append(toIndentedString(runCount)).append("\n");
    sb.append("    browserLimit: ").append(toIndentedString(browserLimit)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    lastRunAt: ").append(toIndentedString(lastRunAt)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    exploreUrl: ").append(toIndentedString(exploreUrl)).append("\n");
    sb.append("    plaintext: ").append(toIndentedString(plaintext)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

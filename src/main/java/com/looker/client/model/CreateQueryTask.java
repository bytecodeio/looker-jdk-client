/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * CreateQueryTask
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-15T12:39:13.185-08:00[America/Los_Angeles]")public class CreateQueryTask {

  @SerializedName("query_id")
  private Long queryId = null;

  @SerializedName("result_format")
  private String resultFormat = null;

  @SerializedName("source")
  private String source = null;

  @SerializedName("deferred")
  private Boolean deferred = null;

  @SerializedName("look_id")
  private Long lookId = null;

  @SerializedName("dashboard_id")
  private String dashboardId = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;
  public CreateQueryTask queryId(Long queryId) {
    this.queryId = queryId;
    return this;
  }

  

  /**
  * Id of query to run
  * @return queryId
  **/
  @Schema(required = true, description = "Id of query to run")
  public Long getQueryId() {
    return queryId;
  }
  public void setQueryId(Long queryId) {
    this.queryId = queryId;
  }
  public CreateQueryTask resultFormat(String resultFormat) {
    this.resultFormat = resultFormat;
    return this;
  }

  

  /**
  * Desired result format
  * @return resultFormat
  **/
  @Schema(required = true, description = "Desired result format")
  public String getResultFormat() {
    return resultFormat;
  }
  public void setResultFormat(String resultFormat) {
    this.resultFormat = resultFormat;
  }
  public CreateQueryTask source(String source) {
    this.source = source;
    return this;
  }

  

  /**
  * Source of query task
  * @return source
  **/
  @Schema(description = "Source of query task")
  public String getSource() {
    return source;
  }
  public void setSource(String source) {
    this.source = source;
  }
  public CreateQueryTask deferred(Boolean deferred) {
    this.deferred = deferred;
    return this;
  }

  

  /**
  * Create the task but defer execution
  * @return deferred
  **/
  @Schema(description = "Create the task but defer execution")
  public Boolean isDeferred() {
    return deferred;
  }
  public void setDeferred(Boolean deferred) {
    this.deferred = deferred;
  }
  public CreateQueryTask lookId(Long lookId) {
    this.lookId = lookId;
    return this;
  }

  

  /**
  * Id of look associated with query.
  * @return lookId
  **/
  @Schema(description = "Id of look associated with query.")
  public Long getLookId() {
    return lookId;
  }
  public void setLookId(Long lookId) {
    this.lookId = lookId;
  }
  public CreateQueryTask dashboardId(String dashboardId) {
    this.dashboardId = dashboardId;
    return this;
  }

  

  /**
  * Id of dashboard associated with query.
  * @return dashboardId
  **/
  @Schema(description = "Id of dashboard associated with query.")
  public String getDashboardId() {
    return dashboardId;
  }
  public void setDashboardId(String dashboardId) {
    this.dashboardId = dashboardId;
  }
  /**
  * Operations the current user is able to perform on this object
  * @return can
  **/
  @Schema(description = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateQueryTask createQueryTask = (CreateQueryTask) o;
    return Objects.equals(this.queryId, createQueryTask.queryId) &&
        Objects.equals(this.resultFormat, createQueryTask.resultFormat) &&
        Objects.equals(this.source, createQueryTask.source) &&
        Objects.equals(this.deferred, createQueryTask.deferred) &&
        Objects.equals(this.lookId, createQueryTask.lookId) &&
        Objects.equals(this.dashboardId, createQueryTask.dashboardId) &&
        Objects.equals(this.can, createQueryTask.can);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(queryId, resultFormat, source, deferred, lookId, dashboardId, can);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateQueryTask {\n");
    
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    resultFormat: ").append(toIndentedString(resultFormat)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    deferred: ").append(toIndentedString(deferred)).append("\n");
    sb.append("    lookId: ").append(toIndentedString(lookId)).append("\n");
    sb.append("    dashboardId: ").append(toIndentedString(dashboardId)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

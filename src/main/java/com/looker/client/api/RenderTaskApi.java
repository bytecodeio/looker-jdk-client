/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.api;

import com.google.gson.reflect.TypeToken;
import com.looker.client.ApiCallback;
import com.looker.client.ApiClient;
import com.looker.client.ApiException;
import com.looker.client.ApiResponse;
import com.looker.client.Configuration;
import com.looker.client.Pair;
import com.looker.client.ProgressRequestBody;
import com.looker.client.ProgressResponseBody;
import com.looker.client.model.CreateDashboardRenderTask;
import com.looker.client.model.Error;
import com.looker.client.model.RenderTask;
import com.looker.client.model.ValidationError;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RenderTaskApi {
    private ApiClient apiClient;

    public RenderTaskApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RenderTaskApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDashboardRenderTask
     * @param body Dashboard render task parameters (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param dashboardId Id of dashboard to render (required)
     * @param resultFormat Output type: pdf, png, or jpg (required)
     * @param fields Requested fields. (optional)
     * @param pdfPaperSize Paper size for pdf (optional)
     * @param pdfLandscape Whether to render pdf in landscape (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDashboardRenderTaskCall(CreateDashboardRenderTask body, Integer width, Integer height, Integer dashboardId, String resultFormat, String fields, String pdfPaperSize, Boolean pdfLandscape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/render_tasks/dashboards/{dashboard_id}/{result_format}"
            .replaceAll("\\{" + "dashboard_id" + "\\}", apiClient.escapeString(dashboardId.toString()))
            .replaceAll("\\{" + "result_format" + "\\}", apiClient.escapeString(resultFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (pdfPaperSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pdf_paper_size", pdfPaperSize));
        if (pdfLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pdf_landscape", pdfLandscape));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDashboardRenderTaskValidateBeforeCall(CreateDashboardRenderTask body, Integer width, Integer height, Integer dashboardId, String resultFormat, String fields, String pdfPaperSize, Boolean pdfLandscape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDashboardRenderTask(Async)");
        }
        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling createDashboardRenderTask(Async)");
        }
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling createDashboardRenderTask(Async)");
        }
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling createDashboardRenderTask(Async)");
        }
        // verify the required parameter 'resultFormat' is set
        if (resultFormat == null) {
            throw new ApiException("Missing the required parameter 'resultFormat' when calling createDashboardRenderTask(Async)");
        }
        
        com.squareup.okhttp.Call call = createDashboardRenderTaskCall(body, width, height, dashboardId, resultFormat, fields, pdfPaperSize, pdfLandscape, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Dashboard Render Task
     * ### Create a new task to render a dashboard to a document or image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param body Dashboard render task parameters (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param dashboardId Id of dashboard to render (required)
     * @param resultFormat Output type: pdf, png, or jpg (required)
     * @param fields Requested fields. (optional)
     * @param pdfPaperSize Paper size for pdf (optional)
     * @param pdfLandscape Whether to render pdf in landscape (optional)
     * @return RenderTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RenderTask createDashboardRenderTask(CreateDashboardRenderTask body, Integer width, Integer height, Integer dashboardId, String resultFormat, String fields, String pdfPaperSize, Boolean pdfLandscape) throws ApiException {
        ApiResponse<RenderTask> resp = createDashboardRenderTaskWithHttpInfo(body, width, height, dashboardId, resultFormat, fields, pdfPaperSize, pdfLandscape);
        return resp.getData();
    }

    /**
     * Create Dashboard Render Task
     * ### Create a new task to render a dashboard to a document or image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param body Dashboard render task parameters (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param dashboardId Id of dashboard to render (required)
     * @param resultFormat Output type: pdf, png, or jpg (required)
     * @param fields Requested fields. (optional)
     * @param pdfPaperSize Paper size for pdf (optional)
     * @param pdfLandscape Whether to render pdf in landscape (optional)
     * @return ApiResponse&lt;RenderTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RenderTask> createDashboardRenderTaskWithHttpInfo(CreateDashboardRenderTask body, Integer width, Integer height, Integer dashboardId, String resultFormat, String fields, String pdfPaperSize, Boolean pdfLandscape) throws ApiException {
        com.squareup.okhttp.Call call = createDashboardRenderTaskValidateBeforeCall(body, width, height, dashboardId, resultFormat, fields, pdfPaperSize, pdfLandscape, null, null);
        Type localVarReturnType = new TypeToken<RenderTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Dashboard Render Task (asynchronously)
     * ### Create a new task to render a dashboard to a document or image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param body Dashboard render task parameters (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param dashboardId Id of dashboard to render (required)
     * @param resultFormat Output type: pdf, png, or jpg (required)
     * @param fields Requested fields. (optional)
     * @param pdfPaperSize Paper size for pdf (optional)
     * @param pdfLandscape Whether to render pdf in landscape (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDashboardRenderTaskAsync(CreateDashboardRenderTask body, Integer width, Integer height, Integer dashboardId, String resultFormat, String fields, String pdfPaperSize, Boolean pdfLandscape, final ApiCallback<RenderTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDashboardRenderTaskValidateBeforeCall(body, width, height, dashboardId, resultFormat, fields, pdfPaperSize, pdfLandscape, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RenderTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLookRenderTask
     * @param lookId Id of look to render (required)
     * @param resultFormat Output type: png, or jpg (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLookRenderTaskCall(Integer lookId, String resultFormat, Integer width, Integer height, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/render_tasks/looks/{look_id}/{result_format}"
            .replaceAll("\\{" + "look_id" + "\\}", apiClient.escapeString(lookId.toString()))
            .replaceAll("\\{" + "result_format" + "\\}", apiClient.escapeString(resultFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLookRenderTaskValidateBeforeCall(Integer lookId, String resultFormat, Integer width, Integer height, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'lookId' is set
        if (lookId == null) {
            throw new ApiException("Missing the required parameter 'lookId' when calling createLookRenderTask(Async)");
        }
        // verify the required parameter 'resultFormat' is set
        if (resultFormat == null) {
            throw new ApiException("Missing the required parameter 'resultFormat' when calling createLookRenderTask(Async)");
        }
        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling createLookRenderTask(Async)");
        }
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling createLookRenderTask(Async)");
        }
        
        com.squareup.okhttp.Call call = createLookRenderTaskCall(lookId, resultFormat, width, height, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Look Render Task
     * ### Create a new task to render a look to an image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param lookId Id of look to render (required)
     * @param resultFormat Output type: png, or jpg (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param fields Requested fields. (optional)
     * @return RenderTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RenderTask createLookRenderTask(Integer lookId, String resultFormat, Integer width, Integer height, String fields) throws ApiException {
        ApiResponse<RenderTask> resp = createLookRenderTaskWithHttpInfo(lookId, resultFormat, width, height, fields);
        return resp.getData();
    }

    /**
     * Create Look Render Task
     * ### Create a new task to render a look to an image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param lookId Id of look to render (required)
     * @param resultFormat Output type: png, or jpg (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;RenderTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RenderTask> createLookRenderTaskWithHttpInfo(Integer lookId, String resultFormat, Integer width, Integer height, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createLookRenderTaskValidateBeforeCall(lookId, resultFormat, width, height, fields, null, null);
        Type localVarReturnType = new TypeToken<RenderTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Look Render Task (asynchronously)
     * ### Create a new task to render a look to an image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param lookId Id of look to render (required)
     * @param resultFormat Output type: png, or jpg (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLookRenderTaskAsync(Integer lookId, String resultFormat, Integer width, Integer height, String fields, final ApiCallback<RenderTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLookRenderTaskValidateBeforeCall(lookId, resultFormat, width, height, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RenderTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLookmlDashboardRenderTask
     * @param body Dashboard render task parameters (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param dashboardId Id of lookml dashboard to render (required)
     * @param resultFormat Output type: pdf, png, or jpg (required)
     * @param fields Requested fields. (optional)
     * @param pdfPaperSize Paper size for pdf (optional)
     * @param pdfLandscape Whether to render pdf in landscape (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLookmlDashboardRenderTaskCall(CreateDashboardRenderTask body, Integer width, Integer height, String dashboardId, String resultFormat, String fields, String pdfPaperSize, Boolean pdfLandscape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/render_tasks/lookml_dashboards/{dashboard_id}/{result_format}"
            .replaceAll("\\{" + "dashboard_id" + "\\}", apiClient.escapeString(dashboardId.toString()))
            .replaceAll("\\{" + "result_format" + "\\}", apiClient.escapeString(resultFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (pdfPaperSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pdf_paper_size", pdfPaperSize));
        if (pdfLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pdf_landscape", pdfLandscape));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLookmlDashboardRenderTaskValidateBeforeCall(CreateDashboardRenderTask body, Integer width, Integer height, String dashboardId, String resultFormat, String fields, String pdfPaperSize, Boolean pdfLandscape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLookmlDashboardRenderTask(Async)");
        }
        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling createLookmlDashboardRenderTask(Async)");
        }
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling createLookmlDashboardRenderTask(Async)");
        }
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling createLookmlDashboardRenderTask(Async)");
        }
        // verify the required parameter 'resultFormat' is set
        if (resultFormat == null) {
            throw new ApiException("Missing the required parameter 'resultFormat' when calling createLookmlDashboardRenderTask(Async)");
        }
        
        com.squareup.okhttp.Call call = createLookmlDashboardRenderTaskCall(body, width, height, dashboardId, resultFormat, fields, pdfPaperSize, pdfLandscape, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Lookml Dashboard Render Task
     * ### Create a new task to render a lookml dashboard to a document or image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param body Dashboard render task parameters (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param dashboardId Id of lookml dashboard to render (required)
     * @param resultFormat Output type: pdf, png, or jpg (required)
     * @param fields Requested fields. (optional)
     * @param pdfPaperSize Paper size for pdf (optional)
     * @param pdfLandscape Whether to render pdf in landscape (optional)
     * @return RenderTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RenderTask createLookmlDashboardRenderTask(CreateDashboardRenderTask body, Integer width, Integer height, String dashboardId, String resultFormat, String fields, String pdfPaperSize, Boolean pdfLandscape) throws ApiException {
        ApiResponse<RenderTask> resp = createLookmlDashboardRenderTaskWithHttpInfo(body, width, height, dashboardId, resultFormat, fields, pdfPaperSize, pdfLandscape);
        return resp.getData();
    }

    /**
     * Create Lookml Dashboard Render Task
     * ### Create a new task to render a lookml dashboard to a document or image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param body Dashboard render task parameters (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param dashboardId Id of lookml dashboard to render (required)
     * @param resultFormat Output type: pdf, png, or jpg (required)
     * @param fields Requested fields. (optional)
     * @param pdfPaperSize Paper size for pdf (optional)
     * @param pdfLandscape Whether to render pdf in landscape (optional)
     * @return ApiResponse&lt;RenderTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RenderTask> createLookmlDashboardRenderTaskWithHttpInfo(CreateDashboardRenderTask body, Integer width, Integer height, String dashboardId, String resultFormat, String fields, String pdfPaperSize, Boolean pdfLandscape) throws ApiException {
        com.squareup.okhttp.Call call = createLookmlDashboardRenderTaskValidateBeforeCall(body, width, height, dashboardId, resultFormat, fields, pdfPaperSize, pdfLandscape, null, null);
        Type localVarReturnType = new TypeToken<RenderTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Lookml Dashboard Render Task (asynchronously)
     * ### Create a new task to render a lookml dashboard to a document or image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param body Dashboard render task parameters (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param dashboardId Id of lookml dashboard to render (required)
     * @param resultFormat Output type: pdf, png, or jpg (required)
     * @param fields Requested fields. (optional)
     * @param pdfPaperSize Paper size for pdf (optional)
     * @param pdfLandscape Whether to render pdf in landscape (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLookmlDashboardRenderTaskAsync(CreateDashboardRenderTask body, Integer width, Integer height, String dashboardId, String resultFormat, String fields, String pdfPaperSize, Boolean pdfLandscape, final ApiCallback<RenderTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLookmlDashboardRenderTaskValidateBeforeCall(body, width, height, dashboardId, resultFormat, fields, pdfPaperSize, pdfLandscape, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RenderTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createQueryRenderTask
     * @param queryId Id of the query to render (required)
     * @param resultFormat Output type: png or jpg (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createQueryRenderTaskCall(Integer queryId, String resultFormat, Integer width, Integer height, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/render_tasks/queries/{query_id}/{result_format}"
            .replaceAll("\\{" + "query_id" + "\\}", apiClient.escapeString(queryId.toString()))
            .replaceAll("\\{" + "result_format" + "\\}", apiClient.escapeString(resultFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createQueryRenderTaskValidateBeforeCall(Integer queryId, String resultFormat, Integer width, Integer height, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'queryId' is set
        if (queryId == null) {
            throw new ApiException("Missing the required parameter 'queryId' when calling createQueryRenderTask(Async)");
        }
        // verify the required parameter 'resultFormat' is set
        if (resultFormat == null) {
            throw new ApiException("Missing the required parameter 'resultFormat' when calling createQueryRenderTask(Async)");
        }
        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling createQueryRenderTask(Async)");
        }
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling createQueryRenderTask(Async)");
        }
        
        com.squareup.okhttp.Call call = createQueryRenderTaskCall(queryId, resultFormat, width, height, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Query Render Task
     * ### Create a new task to render an existing query to an image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param queryId Id of the query to render (required)
     * @param resultFormat Output type: png or jpg (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param fields Requested fields. (optional)
     * @return RenderTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RenderTask createQueryRenderTask(Integer queryId, String resultFormat, Integer width, Integer height, String fields) throws ApiException {
        ApiResponse<RenderTask> resp = createQueryRenderTaskWithHttpInfo(queryId, resultFormat, width, height, fields);
        return resp.getData();
    }

    /**
     * Create Query Render Task
     * ### Create a new task to render an existing query to an image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param queryId Id of the query to render (required)
     * @param resultFormat Output type: png or jpg (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;RenderTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RenderTask> createQueryRenderTaskWithHttpInfo(Integer queryId, String resultFormat, Integer width, Integer height, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createQueryRenderTaskValidateBeforeCall(queryId, resultFormat, width, height, fields, null, null);
        Type localVarReturnType = new TypeToken<RenderTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Query Render Task (asynchronously)
     * ### Create a new task to render an existing query to an image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param queryId Id of the query to render (required)
     * @param resultFormat Output type: png or jpg (required)
     * @param width Output width in pixels (required)
     * @param height Output height in pixels (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createQueryRenderTaskAsync(Integer queryId, String resultFormat, Integer width, Integer height, String fields, final ApiCallback<RenderTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createQueryRenderTaskValidateBeforeCall(queryId, resultFormat, width, height, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RenderTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for renderTask
     * @param renderTaskId Id of render task (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renderTaskCall(String renderTaskId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/render_tasks/{render_task_id}"
            .replaceAll("\\{" + "render_task_id" + "\\}", apiClient.escapeString(renderTaskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renderTaskValidateBeforeCall(String renderTaskId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'renderTaskId' is set
        if (renderTaskId == null) {
            throw new ApiException("Missing the required parameter 'renderTaskId' when calling renderTask(Async)");
        }
        
        com.squareup.okhttp.Call call = renderTaskCall(renderTaskId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Render Task
     * ### Get information about a render task.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param renderTaskId Id of render task (required)
     * @param fields Requested fields. (optional)
     * @return RenderTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RenderTask renderTask(String renderTaskId, String fields) throws ApiException {
        ApiResponse<RenderTask> resp = renderTaskWithHttpInfo(renderTaskId, fields);
        return resp.getData();
    }

    /**
     * Get Render Task
     * ### Get information about a render task.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param renderTaskId Id of render task (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;RenderTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RenderTask> renderTaskWithHttpInfo(String renderTaskId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = renderTaskValidateBeforeCall(renderTaskId, fields, null, null);
        Type localVarReturnType = new TypeToken<RenderTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Render Task (asynchronously)
     * ### Get information about a render task.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     * @param renderTaskId Id of render task (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renderTaskAsync(String renderTaskId, String fields, final ApiCallback<RenderTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renderTaskValidateBeforeCall(renderTaskId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RenderTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for renderTaskResults
     * @param renderTaskId Id of render task (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renderTaskResultsCall(String renderTaskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/render_tasks/{render_task_id}/results"
            .replaceAll("\\{" + "render_task_id" + "\\}", apiClient.escapeString(renderTaskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/jpeg", "image/png", "application/pdf"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renderTaskResultsValidateBeforeCall(String renderTaskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'renderTaskId' is set
        if (renderTaskId == null) {
            throw new ApiException("Missing the required parameter 'renderTaskId' when calling renderTaskResults(Async)");
        }
        
        com.squareup.okhttp.Call call = renderTaskResultsCall(renderTaskId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Render Task Results
     * ### Get the document or image produced by a completed render task.  Returns &#x60;102 Processing&#x60; if the render task has not completed. 
     * @param renderTaskId Id of render task (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String renderTaskResults(String renderTaskId) throws ApiException {
        ApiResponse<String> resp = renderTaskResultsWithHttpInfo(renderTaskId);
        return resp.getData();
    }

    /**
     * Render Task Results
     * ### Get the document or image produced by a completed render task.  Returns &#x60;102 Processing&#x60; if the render task has not completed. 
     * @param renderTaskId Id of render task (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> renderTaskResultsWithHttpInfo(String renderTaskId) throws ApiException {
        com.squareup.okhttp.Call call = renderTaskResultsValidateBeforeCall(renderTaskId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Render Task Results (asynchronously)
     * ### Get the document or image produced by a completed render task.  Returns &#x60;102 Processing&#x60; if the render task has not completed. 
     * @param renderTaskId Id of render task (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renderTaskResultsAsync(String renderTaskId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renderTaskResultsValidateBeforeCall(renderTaskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

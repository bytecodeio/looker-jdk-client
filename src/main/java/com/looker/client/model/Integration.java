/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.looker.client.model.IntegrationParam;
import com.looker.client.model.IntegrationRequiredField;

import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Integration
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-15T12:39:13.185-08:00[America/Los_Angeles]")public class Integration {

  @SerializedName("id")
  private String id = null;

  @SerializedName("integration_hub_id")
  private Long integrationHubId = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("params")
  private List<IntegrationParam> params = null;

  @SerializedName("supported_formats")
  private List<String> supportedFormats = null;

  @SerializedName("supported_action_types")
  private List<String> supportedActionTypes = null;

  @SerializedName("supported_formattings")
  private List<String> supportedFormattings = null;

  @SerializedName("supported_visualization_formattings")
  private List<String> supportedVisualizationFormattings = null;

  @SerializedName("supported_download_settings")
  private List<String> supportedDownloadSettings = null;

  @SerializedName("icon_url")
  private String iconUrl = null;

  @SerializedName("required_fields")
  private List<IntegrationRequiredField> requiredFields = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;
  /**
  * ID of the integration.
  * @return id
  **/
  @Schema(description = "ID of the integration.")
  public String getId() {
    return id;
  }
  /**
  * ID of the integration hub.
  * @return integrationHubId
  **/
  @Schema(description = "ID of the integration hub.")
  public Long getIntegrationHubId() {
    return integrationHubId;
  }
  /**
  * Label for the integration.
  * @return label
  **/
  @Schema(description = "Label for the integration.")
  public String getLabel() {
    return label;
  }
  /**
  * Description of the integration.
  * @return description
  **/
  @Schema(description = "Description of the integration.")
  public String getDescription() {
    return description;
  }
  public Integration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  

  /**
  * Whether the integration is available to users.
  * @return enabled
  **/
  @Schema(description = "Whether the integration is available to users.")
  public Boolean isEnabled() {
    return enabled;
  }
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }
  public Integration params(List<IntegrationParam> params) {
    this.params = params;
    return this;
  }

  public Integration addParamsItem(IntegrationParam paramsItem) {
    if (this.params == null) {
      this.params = new ArrayList<IntegrationParam>();
    }
    this.params.add(paramsItem);
    return this;
  }

  /**
  * Array of params for the integration.
  * @return params
  **/
  @Schema(description = "Array of params for the integration.")
  public List<IntegrationParam> getParams() {
    return params;
  }
  public void setParams(List<IntegrationParam> params) {
    this.params = params;
  }
  /**
  * A list of data formats the integration supports. If unspecified, this will default to [\&quot;txt\&quot;, \&quot;csv\&quot;, \&quot;inline_json\&quot;, \&quot;json\&quot;, \&quot;json_detail\&quot;, \&quot;json_detail_lite_stream\&quot;, \&quot;xlsx\&quot;, \&quot;html\&quot;, \&quot;wysiwyg_pdf\&quot;, \&quot;assembled_pdf\&quot;, \&quot;wysiwyg_png\&quot;, \&quot;csv_zip\&quot;]. Valid values are: \&quot;txt\&quot;, \&quot;csv\&quot;, \&quot;inline_json\&quot;, \&quot;json\&quot;, \&quot;json_detail\&quot;, \&quot;json_detail_lite_stream\&quot;, \&quot;xlsx\&quot;, \&quot;html\&quot;, \&quot;wysiwyg_pdf\&quot;, \&quot;assembled_pdf\&quot;, \&quot;wysiwyg_png\&quot;, \&quot;csv_zip\&quot;.
  * @return supportedFormats
  **/
  @Schema(description = "A list of data formats the integration supports. If unspecified, this will default to [\"txt\", \"csv\", \"inline_json\", \"json\", \"json_detail\", \"json_detail_lite_stream\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\", \"csv_zip\"]. Valid values are: \"txt\", \"csv\", \"inline_json\", \"json\", \"json_detail\", \"json_detail_lite_stream\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\", \"csv_zip\".")
  public List<String> getSupportedFormats() {
    return supportedFormats;
  }
  /**
  * A list of action types the integration supports. Valid values are: \&quot;cell\&quot;, \&quot;query\&quot;, \&quot;dashboard\&quot;.
  * @return supportedActionTypes
  **/
  @Schema(description = "A list of action types the integration supports. Valid values are: \"cell\", \"query\", \"dashboard\".")
  public List<String> getSupportedActionTypes() {
    return supportedActionTypes;
  }
  /**
  * A list of formatting options the integration supports. If unspecified, this will default to [\&quot;formatted\&quot;, \&quot;unformatted\&quot;]. Valid values are: \&quot;formatted\&quot;, \&quot;unformatted\&quot;.
  * @return supportedFormattings
  **/
  @Schema(description = "A list of formatting options the integration supports. If unspecified, this will default to [\"formatted\", \"unformatted\"]. Valid values are: \"formatted\", \"unformatted\".")
  public List<String> getSupportedFormattings() {
    return supportedFormattings;
  }
  /**
  * A list of visualization formatting options the integration supports. If unspecified, this will default to [\&quot;apply\&quot;, \&quot;noapply\&quot;]. Valid values are: \&quot;apply\&quot;, \&quot;noapply\&quot;.
  * @return supportedVisualizationFormattings
  **/
  @Schema(description = "A list of visualization formatting options the integration supports. If unspecified, this will default to [\"apply\", \"noapply\"]. Valid values are: \"apply\", \"noapply\".")
  public List<String> getSupportedVisualizationFormattings() {
    return supportedVisualizationFormattings;
  }
  /**
  * A list of all the download mechanisms the integration supports. The order is undefined: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this will default to [\&quot;push\&quot;]. Valid values are: \&quot;push\&quot;, \&quot;url\&quot;.
  * @return supportedDownloadSettings
  **/
  @Schema(description = "A list of all the download mechanisms the integration supports. The order is undefined: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this will default to [\"push\"]. Valid values are: \"push\", \"url\".")
  public List<String> getSupportedDownloadSettings() {
    return supportedDownloadSettings;
  }
  /**
  * URL to an icon for the integration.
  * @return iconUrl
  **/
  @Schema(description = "URL to an icon for the integration.")
  public String getIconUrl() {
    return iconUrl;
  }
  /**
  * A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required.
  * @return requiredFields
  **/
  @Schema(description = "A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required.")
  public List<IntegrationRequiredField> getRequiredFields() {
    return requiredFields;
  }
  /**
  * Operations the current user is able to perform on this object
  * @return can
  **/
  @Schema(description = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Integration integration = (Integration) o;
    return Objects.equals(this.id, integration.id) &&
        Objects.equals(this.integrationHubId, integration.integrationHubId) &&
        Objects.equals(this.label, integration.label) &&
        Objects.equals(this.description, integration.description) &&
        Objects.equals(this.enabled, integration.enabled) &&
        Objects.equals(this.params, integration.params) &&
        Objects.equals(this.supportedFormats, integration.supportedFormats) &&
        Objects.equals(this.supportedActionTypes, integration.supportedActionTypes) &&
        Objects.equals(this.supportedFormattings, integration.supportedFormattings) &&
        Objects.equals(this.supportedVisualizationFormattings, integration.supportedVisualizationFormattings) &&
        Objects.equals(this.supportedDownloadSettings, integration.supportedDownloadSettings) &&
        Objects.equals(this.iconUrl, integration.iconUrl) &&
        Objects.equals(this.requiredFields, integration.requiredFields) &&
        Objects.equals(this.can, integration.can);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, integrationHubId, label, description, enabled, params, supportedFormats, supportedActionTypes, supportedFormattings, supportedVisualizationFormattings, supportedDownloadSettings, iconUrl, requiredFields, can);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Integration {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    integrationHubId: ").append(toIndentedString(integrationHubId)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    supportedFormats: ").append(toIndentedString(supportedFormats)).append("\n");
    sb.append("    supportedActionTypes: ").append(toIndentedString(supportedActionTypes)).append("\n");
    sb.append("    supportedFormattings: ").append(toIndentedString(supportedFormattings)).append("\n");
    sb.append("    supportedVisualizationFormattings: ").append(toIndentedString(supportedVisualizationFormattings)).append("\n");
    sb.append("    supportedDownloadSettings: ").append(toIndentedString(supportedDownloadSettings)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    requiredFields: ").append(toIndentedString(requiredFields)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

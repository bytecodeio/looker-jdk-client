/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import org.junit.Test;

import com.looker.client.ApiException;
import com.looker.client.api.RenderTaskApi;
import com.looker.client.model.CreateDashboardRenderTask;
import com.looker.client.model.Error;
import com.looker.client.model.RenderTask;
import com.looker.client.model.ValidationError;

import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RenderTaskApi
 */
@Ignore
public class RenderTaskApiTest {

    private final RenderTaskApi api = new RenderTaskApi();

    /**
     * Create Dashboard Render Task
     *
     * ### Create a new task to render a dashboard to a document or image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDashboardRenderTaskTest() throws ApiException {
        CreateDashboardRenderTask body = null;
        Integer width = null;
        Integer height = null;
        Integer dashboardId = null;
        String resultFormat = null;
        String fields = null;
        String pdfPaperSize = null;
        Boolean pdfLandscape = null;
        RenderTask response = api.createDashboardRenderTask(body, width, height, dashboardId, resultFormat, fields, pdfPaperSize, pdfLandscape);

        // TODO: test validations
    }
    /**
     * Create Look Render Task
     *
     * ### Create a new task to render a look to an image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLookRenderTaskTest() throws ApiException {
        Integer lookId = null;
        String resultFormat = null;
        Integer width = null;
        Integer height = null;
        String fields = null;
        RenderTask response = api.createLookRenderTask(lookId, resultFormat, width, height, fields);

        // TODO: test validations
    }
    /**
     * Create Lookml Dashboard Render Task
     *
     * ### Create a new task to render a lookml dashboard to a document or image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLookmlDashboardRenderTaskTest() throws ApiException {
        CreateDashboardRenderTask body = null;
        Integer width = null;
        Integer height = null;
        String dashboardId = null;
        String resultFormat = null;
        String fields = null;
        String pdfPaperSize = null;
        Boolean pdfLandscape = null;
        RenderTask response = api.createLookmlDashboardRenderTask(body, width, height, dashboardId, resultFormat, fields, pdfPaperSize, pdfLandscape);

        // TODO: test validations
    }
    /**
     * Create Query Render Task
     *
     * ### Create a new task to render an existing query to an image.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createQueryRenderTaskTest() throws ApiException {
        Integer queryId = null;
        String resultFormat = null;
        Integer width = null;
        Integer height = null;
        String fields = null;
        RenderTask response = api.createQueryRenderTask(queryId, resultFormat, width, height, fields);

        // TODO: test validations
    }
    /**
     * Get Render Task
     *
     * ### Get information about a render task.  Returns a render task object. To check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task). Once the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void renderTaskTest() throws ApiException {
        String renderTaskId = null;
        String fields = null;
        RenderTask response = api.renderTask(renderTaskId, fields);

        // TODO: test validations
    }
    /**
     * Render Task Results
     *
     * ### Get the document or image produced by a completed render task.  Returns &#x60;102 Processing&#x60; if the render task has not completed. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void renderTaskResultsTest() throws ApiException {
        String renderTaskId = null;
        String response = api.renderTaskResults(renderTaskId);

        // TODO: test validations
    }
}

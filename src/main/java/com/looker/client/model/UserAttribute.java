/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * UserAttribute
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-15T12:39:13.185-08:00[America/Los_Angeles]")public class UserAttribute {

  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("default_value")
  private String defaultValue = null;

  @SerializedName("is_system")
  private Boolean isSystem = null;

  @SerializedName("value_is_hidden")
  private Boolean valueIsHidden = null;

  @SerializedName("user_can_view")
  private Boolean userCanView = null;

  @SerializedName("user_can_edit")
  private Boolean userCanEdit = null;

  @SerializedName("hidden_value_domain_whitelist")
  private String hiddenValueDomainWhitelist = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;
  /**
  * Unique Id
  * @return id
  **/
  @Schema(description = "Unique Id")
  public Long getId() {
    return id;
  }
  public UserAttribute name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Name of user attribute
  * @return name
  **/
  @Schema(description = "Name of user attribute")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public UserAttribute label(String label) {
    this.label = label;
    return this;
  }

  

  /**
  * Human-friendly label for user attribute
  * @return label
  **/
  @Schema(description = "Human-friendly label for user attribute")
  public String getLabel() {
    return label;
  }
  public void setLabel(String label) {
    this.label = label;
  }
  public UserAttribute type(String type) {
    this.type = type;
    return this;
  }

  

  /**
  * Type of user attribute (\&quot;string\&quot;, \&quot;number\&quot;, \&quot;datetime\&quot;, \&quot;yesno\&quot;, \&quot;zipcode\&quot;)
  * @return type
  **/
  @Schema(description = "Type of user attribute (\"string\", \"number\", \"datetime\", \"yesno\", \"zipcode\")")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }
  public UserAttribute defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  

  /**
  * Default value for when no value is set on the user
  * @return defaultValue
  **/
  @Schema(description = "Default value for when no value is set on the user")
  public String getDefaultValue() {
    return defaultValue;
  }
  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }
  /**
  * Attribute is a system default
  * @return isSystem
  **/
  @Schema(description = "Attribute is a system default")
  public Boolean isIsSystem() {
    return isSystem;
  }
  public UserAttribute valueIsHidden(Boolean valueIsHidden) {
    this.valueIsHidden = valueIsHidden;
    return this;
  }

  

  /**
  * If true, users will not be able to view values of this attribute
  * @return valueIsHidden
  **/
  @Schema(description = "If true, users will not be able to view values of this attribute")
  public Boolean isValueIsHidden() {
    return valueIsHidden;
  }
  public void setValueIsHidden(Boolean valueIsHidden) {
    this.valueIsHidden = valueIsHidden;
  }
  public UserAttribute userCanView(Boolean userCanView) {
    this.userCanView = userCanView;
    return this;
  }

  

  /**
  * Non-admin users can see the values of their attributes and use them in filters
  * @return userCanView
  **/
  @Schema(description = "Non-admin users can see the values of their attributes and use them in filters")
  public Boolean isUserCanView() {
    return userCanView;
  }
  public void setUserCanView(Boolean userCanView) {
    this.userCanView = userCanView;
  }
  public UserAttribute userCanEdit(Boolean userCanEdit) {
    this.userCanEdit = userCanEdit;
    return this;
  }

  

  /**
  * Users can change the value of this attribute for themselves
  * @return userCanEdit
  **/
  @Schema(description = "Users can change the value of this attribute for themselves")
  public Boolean isUserCanEdit() {
    return userCanEdit;
  }
  public void setUserCanEdit(Boolean userCanEdit) {
    this.userCanEdit = userCanEdit;
  }
  public UserAttribute hiddenValueDomainWhitelist(String hiddenValueDomainWhitelist) {
    this.hiddenValueDomainWhitelist = hiddenValueDomainWhitelist;
    return this;
  }

  

  /**
  * Destinations to which a hidden attribute may be sent. Once set, cannot be edited.
  * @return hiddenValueDomainWhitelist
  **/
  @Schema(description = "Destinations to which a hidden attribute may be sent. Once set, cannot be edited.")
  public String getHiddenValueDomainWhitelist() {
    return hiddenValueDomainWhitelist;
  }
  public void setHiddenValueDomainWhitelist(String hiddenValueDomainWhitelist) {
    this.hiddenValueDomainWhitelist = hiddenValueDomainWhitelist;
  }
  /**
  * Operations the current user is able to perform on this object
  * @return can
  **/
  @Schema(description = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAttribute userAttribute = (UserAttribute) o;
    return Objects.equals(this.id, userAttribute.id) &&
        Objects.equals(this.name, userAttribute.name) &&
        Objects.equals(this.label, userAttribute.label) &&
        Objects.equals(this.type, userAttribute.type) &&
        Objects.equals(this.defaultValue, userAttribute.defaultValue) &&
        Objects.equals(this.isSystem, userAttribute.isSystem) &&
        Objects.equals(this.valueIsHidden, userAttribute.valueIsHidden) &&
        Objects.equals(this.userCanView, userAttribute.userCanView) &&
        Objects.equals(this.userCanEdit, userAttribute.userCanEdit) &&
        Objects.equals(this.hiddenValueDomainWhitelist, userAttribute.hiddenValueDomainWhitelist) &&
        Objects.equals(this.can, userAttribute.can);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, name, label, type, defaultValue, isSystem, valueIsHidden, userCanView, userCanEdit, hiddenValueDomainWhitelist, can);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAttribute {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    isSystem: ").append(toIndentedString(isSystem)).append("\n");
    sb.append("    valueIsHidden: ").append(toIndentedString(valueIsHidden)).append("\n");
    sb.append("    userCanView: ").append(toIndentedString(userCanView)).append("\n");
    sb.append("    userCanEdit: ").append(toIndentedString(userCanEdit)).append("\n");
    sb.append("    hiddenValueDomainWhitelist: ").append(toIndentedString(hiddenValueDomainWhitelist)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

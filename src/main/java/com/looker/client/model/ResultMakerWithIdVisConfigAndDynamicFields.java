/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.looker.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.looker.client.model.Query;
import com.looker.client.model.ResultMakerFilterables;

import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ResultMakerWithIdVisConfigAndDynamicFields
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-15T12:39:13.185-08:00[America/Los_Angeles]")public class ResultMakerWithIdVisConfigAndDynamicFields {

  @SerializedName("id")
  private Long id = null;

  @SerializedName("dynamic_fields")
  private String dynamicFields = null;

  @SerializedName("filterables")
  private List<ResultMakerFilterables> filterables = null;

  @SerializedName("sorts")
  private List<String> sorts = null;

  @SerializedName("merge_result_id")
  private String mergeResultId = null;

  @SerializedName("total")
  private Boolean total = null;

  @SerializedName("query_id")
  private Long queryId = null;

  @SerializedName("query")
  private Query query = null;

  @SerializedName("vis_config")
  private HashMap<String, String> visConfig = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;
  /**
  * Unique Id.
  * @return id
  **/
  @Schema(description = "Unique Id.")
  public Long getId() {
    return id;
  }
  /**
  * JSON string of dynamic field information.
  * @return dynamicFields
  **/
  @Schema(description = "JSON string of dynamic field information.")
  public String getDynamicFields() {
    return dynamicFields;
  }
  /**
  * array of items that can be filtered and information about them.
  * @return filterables
  **/
  @Schema(description = "array of items that can be filtered and information about them.")
  public List<ResultMakerFilterables> getFilterables() {
    return filterables;
  }
  /**
  * Sorts of the constituent Look, Query, or Merge Query
  * @return sorts
  **/
  @Schema(description = "Sorts of the constituent Look, Query, or Merge Query")
  public List<String> getSorts() {
    return sorts;
  }
  /**
  * ID of merge result if this is a merge_result.
  * @return mergeResultId
  **/
  @Schema(description = "ID of merge result if this is a merge_result.")
  public String getMergeResultId() {
    return mergeResultId;
  }
  /**
  * Total of the constituent Look, Query, or Merge Query
  * @return total
  **/
  @Schema(description = "Total of the constituent Look, Query, or Merge Query")
  public Boolean isTotal() {
    return total;
  }
  /**
  * ID of query if this is a query.
  * @return queryId
  **/
  @Schema(description = "ID of query if this is a query.")
  public Long getQueryId() {
    return queryId;
  }
  public ResultMakerWithIdVisConfigAndDynamicFields query(Query query) {
    this.query = query;
    return this;
  }

  

  /**
  * Get query
  * @return query
  **/
  @Schema(description = "")
  public Query getQuery() {
    return query;
  }
  public void setQuery(Query query) {
    this.query = query;
  }
  /**
  * Vis config of the constituent Query, or Merge Query.
  * @return visConfig
  **/
  @Schema(description = "Vis config of the constituent Query, or Merge Query.")
  public HashMap<String, String> getVisConfig() {
    return visConfig;
  }
  /**
  * Operations the current user is able to perform on this object
  * @return can
  **/
  @Schema(description = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultMakerWithIdVisConfigAndDynamicFields resultMakerWithIdVisConfigAndDynamicFields = (ResultMakerWithIdVisConfigAndDynamicFields) o;
    return Objects.equals(this.id, resultMakerWithIdVisConfigAndDynamicFields.id) &&
        Objects.equals(this.dynamicFields, resultMakerWithIdVisConfigAndDynamicFields.dynamicFields) &&
        Objects.equals(this.filterables, resultMakerWithIdVisConfigAndDynamicFields.filterables) &&
        Objects.equals(this.sorts, resultMakerWithIdVisConfigAndDynamicFields.sorts) &&
        Objects.equals(this.mergeResultId, resultMakerWithIdVisConfigAndDynamicFields.mergeResultId) &&
        Objects.equals(this.total, resultMakerWithIdVisConfigAndDynamicFields.total) &&
        Objects.equals(this.queryId, resultMakerWithIdVisConfigAndDynamicFields.queryId) &&
        Objects.equals(this.query, resultMakerWithIdVisConfigAndDynamicFields.query) &&
        Objects.equals(this.visConfig, resultMakerWithIdVisConfigAndDynamicFields.visConfig) &&
        Objects.equals(this.can, resultMakerWithIdVisConfigAndDynamicFields.can);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, dynamicFields, filterables, sorts, mergeResultId, total, queryId, query, visConfig, can);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultMakerWithIdVisConfigAndDynamicFields {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dynamicFields: ").append(toIndentedString(dynamicFields)).append("\n");
    sb.append("    filterables: ").append(toIndentedString(filterables)).append("\n");
    sb.append("    sorts: ").append(toIndentedString(sorts)).append("\n");
    sb.append("    mergeResultId: ").append(toIndentedString(mergeResultId)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    visConfig: ").append(toIndentedString(visConfig)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@looker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import org.junit.Test;

import com.looker.client.ApiException;
import com.looker.client.api.UserAttributeApi;
import com.looker.client.model.Error;
import com.looker.client.model.UserAttribute;
import com.looker.client.model.UserAttributeGroupValue;
import com.looker.client.model.ValidationError;

import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserAttributeApi
 */
@Ignore
public class UserAttributeApiTest {

    private final UserAttributeApi api = new UserAttributeApi();

    /**
     * Get User Attribute Group Values
     *
     * ### Returns all values of a user attribute defined by user groups, in precedence order.  A user may be a member of multiple groups which define different values for a given user attribute. The order of group-values in the response determines precedence for selecting which group-value applies to a given user.  For more information, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).  Results will only include groups that the caller&#x27;s user account has permission to see. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allUserAttributeGroupValuesTest() throws ApiException {
        Integer userAttributeId = null;
        String fields = null;
        List<UserAttributeGroupValue> response = api.allUserAttributeGroupValues(userAttributeId, fields);

        // TODO: test validations
    }
    /**
     * Get All User Attributes
     *
     * ### Get information about all user attributes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allUserAttributesTest() throws ApiException {
        String fields = null;
        String sorts = null;
        List<UserAttribute> response = api.allUserAttributes(fields, sorts);

        // TODO: test validations
    }
    /**
     * Create User Attribute
     *
     * ### Create a new user attribute. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserAttributeTest() throws ApiException {
        UserAttribute body = null;
        String fields = null;
        UserAttribute response = api.createUserAttribute(body, fields);

        // TODO: test validations
    }
    /**
     * Delete User Attribute
     *
     * ### Delete a user attribute (admin only). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserAttributeTest() throws ApiException {
        Integer userAttributeId = null;
        String response = api.deleteUserAttribute(userAttributeId);

        // TODO: test validations
    }
    /**
     * Set User Attribute Group Values
     *
     * ### Define values for a user attribute across a set of groups, in priority order.  This function defines all values for a user attribute defined by user groups. This is a global setting, potentially affecting all users in the system. This function replaces any existing group value definitions for the indicated user attribute.  The value of a user attribute for a given user is determined by searching the following locations, in this order:  1. the user&#x27;s account settings 2. the groups that the user is a member of 3. the default value of the user attribute, if any  The user may be a member of multiple groups which define different values for that user attribute. The order of items in the group_values parameter determines which group takes priority for that user. Lowest array index wins.  An alternate method to indicate the selection precedence of group-values is to assign numbers to the &#x27;rank&#x27; property of each group-value object in the array. Lowest &#x27;rank&#x27; value wins. If you use this technique, you must assign a rank value to every group-value object in the array.  To set a user attribute value for a single user, see [Set User Attribute User Value](#!/User/set_user_attribute_user_value). To set a user attribute value for all members of a group, see [Set User Attribute Group Value](#!/Group/update_user_attribute_group_value). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setUserAttributeGroupValuesTest() throws ApiException {
        List<UserAttributeGroupValue> body = null;
        Integer userAttributeId = null;
        List<UserAttributeGroupValue> response = api.setUserAttributeGroupValues(body, userAttributeId);

        // TODO: test validations
    }
    /**
     * Update User Attribute
     *
     * ### Update a user attribute definition. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserAttributeTest() throws ApiException {
        UserAttribute body = null;
        Integer userAttributeId = null;
        String fields = null;
        UserAttribute response = api.updateUserAttribute(body, userAttributeId, fields);

        // TODO: test validations
    }
    /**
     * Get User Attribute
     *
     * ### Get information about a user attribute. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userAttributeTest() throws ApiException {
        Integer userAttributeId = null;
        String fields = null;
        UserAttribute response = api.userAttribute(userAttributeId, fields);

        // TODO: test validations
    }
}
